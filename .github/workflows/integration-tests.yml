name: Integration Tests

on:
    push:
        branches: [main, develop, testing]
    pull_request:
        branches: [main, develop, testing]
    schedule:
        # Run daily at 2 AM UTC
        - cron: "0 2 * * *"
    workflow_dispatch:
        inputs:
            test_suite:
                description: "Test suite to run"
                required: false
                default: "All"
                type: choice
                options:
                    - All
                    - Backup
                    - Restore
                    - WSL
                    - Gaming
                    - Cloud
                    - Setup
            debug_mode:
                description: "Enable debug mode"
                required: false
                default: false
                type: boolean

permissions:
    contents: read
    checks: write
    pull-requests: write

env:
    POWERSHELL_TELEMETRY_OPTOUT: 1
    DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:
    # Unit Tests - Fast feedback
    unit-tests:
        name: Unit Tests
        runs-on: windows-latest
        timeout-minutes: 30

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Setup PowerShell modules
              shell: pwsh
              run: |
                  Set-PSRepository PSGallery -InstallationPolicy Trusted
                  Install-Module -Name Pester -Force -SkipPublisherCheck -Scope CurrentUser -RequiredVersion 5.5.0
                  Install-Module -Name Yayaml -Force -SkipPublisherCheck -Scope CurrentUser
                  Install-Module -Name Microsoft.PowerShell.ConsoleGuiTools -RequiredVersion 0.7.7 -Force -SkipPublisherCheck -Scope CurrentUser

            - name: Run unit tests
              shell: pwsh
              run: |
                  $config = New-PesterConfiguration
                  $config.Run.Path = './tests/unit'
                  $config.TestResult.Enabled = $true
                  $config.TestResult.OutputPath = './test-results/unit-tests.xml'
                  $config.TestResult.OutputFormat = 'JUnitXml'
                  $config.CodeCoverage.Enabled = $true
                  $config.CodeCoverage.Path = './*.ps*1'
                  $config.CodeCoverage.OutputPath = './test-results/coverage.xml'

                  New-Item -Path './test-results' -ItemType Directory -Force
                  $result = Invoke-Pester -Configuration $config

                  if ($result.FailedCount -gt 0) {
                    Write-Error "Unit tests failed: $($result.FailedCount) failures"
                  }

            - name: Upload test results
              uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: unit-test-results
                  path: test-results/

    # Integration Tests - Real Windows Environment
    integration-tests:
        name: Integration Tests - Windows
        runs-on: windows-latest
        timeout-minutes: 90
        needs: unit-tests

        strategy:
            matrix:
                test_suite:
                    - Backup
                    - Restore
                    - WSL
                    - Gaming
                    - Cloud
                    - Setup
            fail-fast: false

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Setup PowerShell modules
              shell: pwsh
              run: |
                  Set-PSRepository PSGallery -InstallationPolicy Trusted
                  Install-Module -Name Pester -Force -SkipPublisherCheck -Scope CurrentUser -RequiredVersion 5.5.0
                  Install-Module -Name Yayaml -Force -SkipPublisherCheck -Scope CurrentUser
                  Install-Module -Name Microsoft.PowerShell.ConsoleGuiTools -RequiredVersion 0.7.7 -Force -SkipPublisherCheck -Scope CurrentUser

            - name: Setup WSL with Ubuntu
              uses: Vampire/setup-wsl@v6
              with:
                  distribution: Ubuntu-22.04
                  use-cache: true
                  set-as-default: true
                  update: true
                  additional-packages: curl wget git vim python3 python3-pip nodejs npm sudo

            - name: Install chezmoi in WSL
              shell: pwsh
              run: |
                  # Install chezmoi in WSL using the default user
                  wsl -d Ubuntu-22.04 -- bash -c "sh -c \"\$(curl -fsLS get.chezmoi.io)\" -- -b /usr/local/bin"
                  wsl -d Ubuntu-22.04 -- bash -c "chezmoi --version"

            - name: Setup package managers
              shell: pwsh
              run: |
                  # Install Chocolatey
                  Set-ExecutionPolicy Bypass -Scope Process -Force
                  [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
                  iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))

                  # Install Scoop
                  if (-not (Get-Command scoop -ErrorAction SilentlyContinue)) {
                    iwr -useb get.scoop.sh | iex
                  }

                  # Winget should be pre-installed on GitHub Actions runners
                  winget --version

            - name: Install gaming platform simulators
              shell: pwsh
              run: |
                  # Create mock gaming directories and files for testing
                  $steamPath = "$env:ProgramFiles(x86)\Steam"
                  $epicPath = "$env:ProgramFiles(x86)\Epic Games\Launcher"
                  $gogPath = "$env:ProgramFiles(x86)\GOG Galaxy"
                  $eaPath = "$env:ProgramFiles\Electronic Arts\EA Desktop"

                  # Create directories
                  New-Item -Path $steamPath -ItemType Directory -Force
                  New-Item -Path $epicPath -ItemType Directory -Force
                  New-Item -Path $gogPath -ItemType Directory -Force
                  New-Item -Path $eaPath -ItemType Directory -Force

                  # Create mock configuration files
                  @{
                    "steam" = @{
                      "user_id" = "123456789"
                      "username" = "testuser"
                      "games" = @()
                    }
                  } | ConvertTo-Json | Out-File "$steamPath\config.json"

                  @{
                    "epic" = @{
                      "user_id" = "test-epic-user"
                      "games" = @()
                    }
                  } | ConvertTo-Json | Out-File "$epicPath\config.json"

            - name: Setup cloud storage simulation
              shell: pwsh
              run: |
                  # Create mock cloud storage directories
                  $oneDrivePath = "$env:USERPROFILE\OneDrive"
                  $googleDrivePath = "$env:USERPROFILE\Google Drive"
                  $dropboxPath = "$env:USERPROFILE\Dropbox"

                  New-Item -Path "$oneDrivePath\WindowsMelodyRecovery" -ItemType Directory -Force
                  New-Item -Path "$googleDrivePath\WindowsMelodyRecovery" -ItemType Directory -Force
                  New-Item -Path "$dropboxPath\WindowsMelodyRecovery" -ItemType Directory -Force

                  # Create mock sync status files
                  "synced" | Out-File "$oneDrivePath\.sync_status"
                  "synced" | Out-File "$googleDrivePath\.sync_status"
                  "synced" | Out-File "$dropboxPath\.sync_status"

            - name: Initialize Windows Melody Recovery module
              shell: pwsh
              run: |
                  # Import the module
                  Import-Module .\WindowsMelodyRecovery.psm1 -Force

                  # Initialize with test configuration
                  $config = @{
                    BackupRoot = "$env:TEMP\WMR-Tests\Backups"
                    CloudProvider = "OneDrive"
                    CloudPath = "$env:USERPROFILE\OneDrive\WindowsMelodyRecovery"
                    LogLevel = "Verbose"
                    TestMode = $true
                  }

                  New-Item -Path $config.BackupRoot -ItemType Directory -Force
                  $config | ConvertTo-Json | Out-File "Config\test-config.json"

            - name: Run integration tests
              shell: pwsh
              run: |
                  $testSuite = "${{ matrix.test_suite }}"
                  if ("${{ github.event.inputs.test_suite }}" -ne "") {
                    $testSuite = "${{ github.event.inputs.test_suite }}"
                  }

                  Write-Host "Running test suite: $testSuite" -ForegroundColor Green

                  # Create test results directory
                  New-Item -Path "test-results\integration" -ItemType Directory -Force

                  # Configure Pester
                  $config = New-PesterConfiguration
                  $config.Run.Path = "./tests/integration"
                  $config.Filter.Tag = $testSuite
                  $config.TestResult.Enabled = $true
                  $config.TestResult.OutputPath = "./test-results/integration/integration-tests-$testSuite.xml"
                  $config.TestResult.OutputFormat = 'JUnitXml'
                  $config.Output.Verbosity = 'Detailed'

                  # Set environment variables for tests
                  $env:WMR_TEST_MODE = "true"
                  $env:WMR_BACKUP_ROOT = "$env:TEMP\WMR-Tests\Backups"
                  $env:WMR_WSL_DISTRO = "Ubuntu-22.04"
                  $env:WMR_CLOUD_PATH = "$env:USERPROFILE\OneDrive\WindowsMelodyRecovery"

                  # Run the tests
                  $result = Invoke-Pester -Configuration $config

                  # Generate summary
                  $summary = @{
                    TestSuite = $testSuite
                    TotalTests = $result.TotalCount
                    PassedTests = $result.PassedCount
                    FailedTests = $result.FailedCount
                    SkippedTests = $result.SkippedCount
                    Duration = $result.TotalTime
                    Timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
                  }

                  $summary | ConvertTo-Json | Out-File "test-results\integration\summary-$testSuite.json"

                  if ($result.FailedCount -gt 0) {
                    Write-Error "Integration tests failed: $($result.FailedCount) failures in $testSuite suite"
                  }

            - name: Collect system information
              shell: pwsh
              if: always()
              run: |
                  $sysInfo = @{
                    OS = (Get-CimInstance Win32_OperatingSystem).Caption
                    PowerShell = $PSVersionTable.PSVersion.ToString()
                    WSL = try { wsl --version } catch { "Not available" }
                    Chocolatey = try { choco --version } catch { "Not installed" }
                    Scoop = try { scoop --version } catch { "Not installed" }
                    Winget = try { winget --version } catch { "Not installed" }
                    DotNet = try { dotnet --version } catch { "Not installed" }
                    Git = try { git --version } catch { "Not installed" }
                    Timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
                  }

                  New-Item -Path "test-results" -ItemType Directory -Force
                  $sysInfo | ConvertTo-Json | Out-File "test-results\system-info.json"

            - name: Upload integration test results
              uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: integration-test-results-${{ matrix.test_suite }}
                  path: test-results/

    # Full End-to-End Test
    e2e-tests:
        name: End-to-End Tests
        runs-on: windows-latest
        timeout-minutes: 120
        needs: integration-tests
        if: github.event_name == 'schedule' || github.event.inputs.test_suite == 'All' || github.ref == 'refs/heads/main'

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Setup WSL for E2E Tests
              uses: Vampire/setup-wsl@v6
              with:
                  distribution: Ubuntu-22.04
                  use-cache: true
                  set-as-default: true
                  update: true
                  additional-packages: curl wget git vim python3 python3-pip nodejs npm sudo

            - name: Setup complete environment
              shell: pwsh
              run: |
                  # Install all required modules and tools
                  Set-PSRepository PSGallery -InstallationPolicy Trusted
                  Install-Module -Name Pester -Force -SkipPublisherCheck -Scope CurrentUser -RequiredVersion 5.5.0
                  Install-Module -Name Yayaml -Force -SkipPublisherCheck -Scope CurrentUser
                  Install-Module -Name Microsoft.PowerShell.ConsoleGuiTools -RequiredVersion 0.7.7 -Force -SkipPublisherCheck -Scope CurrentUser

                  # Install package managers
                  Set-ExecutionPolicy Bypass -Scope Process -Force
                  iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
                  iwr -useb get.scoop.sh | iex

            - name: Run complete backup and restore cycle
              shell: pwsh
              run: |
                  # Record start time for duration calculation
                  $startTime = Get-Date

                  # Import module
                  Import-Module .\WindowsMelodyRecovery.psm1 -Force

                  # Setup test environment
                  $backupRoot = "$env:TEMP\WMR-E2E-Tests"
                  New-Item -Path $backupRoot -ItemType Directory -Force

                  # Initialize module
                  Initialize-WindowsMelodyRecovery -BackupRoot $backupRoot -Force

                  # Run full backup
                  Write-Host "Starting full backup..." -ForegroundColor Green
                  $backupResult = Backup-WindowsMelodyRecovery -BackupRootPath $backupRoot

                  if (-not $backupResult.Success) {
                    throw "Backup failed: $($backupResult.Errors -join ', ')"
                  }

                  Write-Host "Backup completed successfully" -ForegroundColor Green

                  # Simulate system changes
                  Write-Host "Simulating system changes..." -ForegroundColor Yellow

                  # Run full restore
                  Write-Host "Starting full restore..." -ForegroundColor Green
                  $restoreResult = Restore-WindowsMelodyRecovery -BackupRootPath $backupRoot

                  if (-not $restoreResult.Success) {
                    throw "Restore failed: $($restoreResult.Errors -join ', ')"
                  }

                  Write-Host "Restore completed successfully" -ForegroundColor Green

                  # Generate E2E report
                  $e2eReport = @{
                    BackupResult = $backupResult
                    RestoreResult = $restoreResult
                    Duration = (Get-Date) - $startTime
                    Success = $backupResult.Success -and $restoreResult.Success
                    Timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
                  }

                  New-Item -Path "test-results" -ItemType Directory -Force
                  $e2eReport | ConvertTo-Json -Depth 10 | Out-File "test-results\e2e-report.json"

            - name: Upload E2E test results
              uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: e2e-test-results
                  path: test-results/

    # Test Report Generation
    generate-report:
        name: Generate Test Report
        runs-on: ubuntu-latest
        needs: [unit-tests, integration-tests, e2e-tests]
        if: always()

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Download all test results
              uses: actions/download-artifact@v4
              with:
                  path: all-test-results/
              continue-on-error: true

            - name: Generate comprehensive report
              shell: pwsh
              run: |
                  # Install PowerShell modules
                  Install-Module -Name ImportExcel -Force -SkipPublisherCheck -Scope CurrentUser

                  # Collect all test results
                  $allResults = @()

                  # Check if all-test-results directory exists
                  if (-not (Test-Path "all-test-results")) {
                    Write-Warning "No test results downloaded. Creating empty directory structure."
                    New-Item -Path "all-test-results" -ItemType Directory -Force
                  }

                          # Get test directories (may be empty)
                  $testDirs = Get-ChildItem "all-test-results" -Directory -ErrorAction SilentlyContinue

                  if ($testDirs) {
                    Write-Host "Found $($testDirs.Count) test result directories" -ForegroundColor Green
                    foreach ($dir in $testDirs) {
                      Write-Host "Processing directory: $($dir.Name)" -ForegroundColor Cyan
                      $jsonFiles = Get-ChildItem "$($dir.FullName)" -Filter "*.json" -Recurse -ErrorAction SilentlyContinue

                      if ($jsonFiles) {
                        foreach ($file in $jsonFiles) {
                          try {
                            $content = Get-Content $file.FullName | ConvertFrom-Json
                            $allResults += @{
                              Source = $dir.Name
                              File = $file.Name
                              Data = $content
                            }
                            Write-Host "  Added: $($file.Name)" -ForegroundColor Green
                          } catch {
                            Write-Warning "Failed to parse $($file.FullName): $($_.Exception.Message)"
                          }
                        }
                      } else {
                        Write-Warning "No JSON files found in $($dir.Name)"
                      }
                    }
                  } else {
                    Write-Warning "No test result directories found. Report will be generated with empty results."
                  }

                  # Generate summary report
                  $summary = @{
                    TotalTestRuns = $allResults.Count
                    GeneratedAt = Get-Date -Format "yyyy-MM-dd HH:mm:ss UTC"
                    GitRef = "${{ github.ref }}"
                    GitSha = "${{ github.sha }}"
                    RunId = "${{ github.run_id }}"
                    Results = $allResults
                  }

                  # Save comprehensive report
                  New-Item -Path "final-report" -ItemType Directory -Force
                  $summary | ConvertTo-Json -Depth 10 | Out-File "final-report/comprehensive-test-report.json"

                  # Generate HTML report
                  $html = @"
                  <!DOCTYPE html>
                  <html>
                  <head>
                      <title>Windows Melody Recovery - Test Report</title>
                      <style>
                          body { font-family: Arial, sans-serif; margin: 20px; }
                          .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; border-radius: 8px; }
                          .summary { background-color: #f8f9fa; padding: 20px; margin: 20px 0; border-radius: 8px; border-left: 4px solid #007bff; }
                          .success { color: #28a745; }
                          .failure { color: #dc3545; }
                          .warning { color: #ffc107; }
                          table { border-collapse: collapse; width: 100%; margin: 20px 0; }
                          th, td { border: 1px solid #dee2e6; padding: 12px; text-align: left; }
                          th { background-color: #e9ecef; font-weight: bold; }
                          .badge { padding: 4px 8px; border-radius: 4px; font-size: 12px; font-weight: bold; }
                          .badge-success { background-color: #d4edda; color: #155724; }
                          .badge-danger { background-color: #f8d7da; color: #721c24; }
                      </style>
                  </head>
                  <body>
                      <div class="header">
                          <h1>🧪 Windows Melody Recovery - Integration Test Report</h1>
                          <p><strong>Generated:</strong> $($summary.GeneratedAt)</p>
                          <p><strong>Git Ref:</strong> $($summary.GitRef)</p>
                          <p><strong>Run ID:</strong> $($summary.RunId)</p>
                      </div>

                      <div class="summary">
                          <h2>📊 Test Summary</h2>
                          <p><strong>Total Test Runs:</strong> $($summary.TotalTestRuns)</p>
                          <p><strong>Environment:</strong> GitHub Actions Windows Runner</p>
                          <p><strong>Real WSL:</strong> ✅ Ubuntu 22.04</p>
                          <p><strong>Real Package Managers:</strong> ✅ Chocolatey, Scoop, Winget</p>
                      </div>

                      <h2>📋 Test Results by Suite</h2>
                      <table>
                          <tr>
                              <th>Test Suite</th>
                              <th>Status</th>
                              <th>Details</th>
                          </tr>
                  "@

                          if ($allResults.Count -gt 0) {
                    foreach ($result in $allResults) {
                      $status = if ($result.Data.Success -eq $true) { "✅ Passed" } else { "❌ Failed" }
                      $badgeClass = if ($result.Data.Success -eq $true) { "badge-success" } else { "badge-danger" }

                      $html += @"
                          <tr>
                              <td>$($result.Source)</td>
                              <td><span class="badge $badgeClass">$status</span></td>
                              <td>$($result.File)</td>
                          </tr>
                  "@
                    }
                  } else {
                    $html += @"
                          <tr>
                              <td colspan="3" style="text-align: center; font-style: italic; color: #6c757d;">
                                  No test results available. Jobs may have failed or been skipped.
                              </td>
                          </tr>
                  "@
                  }

                  $html += @"
                      </table>

                      <div style="margin-top: 40px; padding: 20px; background-color: #e7f3ff; border-radius: 8px;">
                          <h3>🚀 About This Test Suite</h3>
                          <p>This comprehensive test suite runs on <strong>real Windows environments</strong> with:</p>
                          <ul>
                              <li><strong>Real WSL 2</strong> with Ubuntu 22.04</li>
                              <li><strong>Real Package Managers</strong> (Chocolatey, Scoop, Winget)</li>
                              <li><strong>Real PowerShell</strong> environment</li>
                              <li><strong>Simulated Gaming Platforms</strong> and cloud storage</li>
                              <li><strong>Complete Backup/Restore Cycles</strong></li>
                          </ul>
                          <p>Unlike the Docker-based mock environment, these tests validate actual functionality on real Windows systems.</p>
                      </div>
                  </body>
                  </html>
                  "@

                  $html | Out-File "final-report/test-report.html"

            - name: Upload final report
              uses: actions/upload-artifact@v4
              with:
                  name: comprehensive-test-report
                  path: final-report/

            - name: Comment on PR
              if: github.event_name == 'pull_request'
              uses: actions/github-script@v7
              with:
                  script: |
                      const fs = require('fs');
                      const path = 'final-report/comprehensive-test-report.json';
                      const runId = '${{ github.run_id }}';

                      let comment = '';

                      if (fs.existsSync(path)) {
                        const report = JSON.parse(fs.readFileSync(path, 'utf8'));
                        const totalRuns = report.TotalTestRuns;

                        comment = `## 🧪 Integration Test Results

                        **Test Summary:**
                        - Total Test Runs: ${totalRuns}
                        - Environment: Real Windows with WSL 2
                        - Package Managers: Chocolatey, Scoop, Winget

                        **View Details:**
                        - [Full Test Report](https://github.com/${{ github.repository }}/actions/runs/${runId})
                        - [Download Artifacts](https://github.com/${{ github.repository }}/actions/runs/${runId}#artifacts)

                        This test suite validates the Windows Melody Recovery module on real Windows environments with actual WSL, package managers, and simulated gaming platforms.`;
                      } else {
                        comment = `## 🧪 Integration Test Results

                        **Test Summary:**
                        - Status: ⚠️ No test results available
                        - Environment: Real Windows with WSL 2
                        - Package Managers: Chocolatey, Scoop, Winget

                        **Issue:**
                        Some test jobs may have failed or been skipped. Please check the workflow logs for details.

                        **View Details:**
                        - [Full Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${runId})
                        - [Workflow Logs](https://github.com/${{ github.repository }}/actions/runs/${runId}#summary)`;
                      }

                      github.rest.issues.createComment({
                        issue_number: context.issue.number,
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        body: comment
                      });
