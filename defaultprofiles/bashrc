# ~/.bashrc

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# History control
HISTCONTROL=ignoreboth
HISTSIZE=10000
HISTFILESIZE=20000
shopt -s histappend

# Check window size after each command
shopt -s checkwinsize

# Make less more friendly for non-text input files
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# Enable color support
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# Colored GCC warnings and errors
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# Some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Development directories
export CODE_DIR="$HOME/code"
alias cdcode='cd $CODE_DIR'

# Python development
export PYTHONDONTWRITEBYTECODE=1  # Prevent Python from writing .pyc files
export PYTHONUNBUFFERED=1         # Prevent Python from buffering stdout and stderr

# Python virtual environment
export WORKON_HOME=$HOME/.virtualenvs
export PROJECT_HOME=$CODE_DIR
if [ -f /usr/local/bin/virtualenvwrapper.sh ]; then
    source /usr/local/bin/virtualenvwrapper.sh
fi

# # Python aliases
# alias py='python3'
# alias pip='pip3'
# alias pytest='python -m pytest'
# alias pyformat='black'
# alias pylint='python -m pylint'

# Node.js development
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # Load nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # Load nvm bash_completion

# # Node.js aliases
# alias nr='npm run'
# alias ni='npm install'
# alias nid='npm install --save-dev'
# alias nrb='npm run build'
# alias nrt='npm run test'
# alias nrd='npm run dev'

# PHP development
alias composer='php composer.phar'
alias art='php artisan'  # For Laravel projects
alias phpunit='./vendor/bin/phpunit'
alias sail='[ -f sail ] && bash sail || bash vendor/bin/sail'

# Go development
export GOPATH=$HOME/go
export PATH=$PATH:/usr/local/go/bin:$GOPATH/bin

# # Go aliases
# alias gob='go build'
# alias gor='go run'
# alias got='go test'
# alias gof='go fmt'

# # Docker aliases
# alias d='docker'
# alias dc='docker-compose'
# alias dps='docker ps'
# alias dpsa='docker ps -a'
# alias dex='docker exec -it'
# alias dlog='docker logs'
# alias dcup='docker-compose up'
# alias dcdown='docker-compose down'

# # Git aliases
# alias g='git'
# alias ga='git add'
# alias gc='git commit'
# alias gp='git push'
# alias gpl='git pull'
# alias gst='git status'
# alias gd='git diff'
# alias gco='git checkout'
# alias gb='git branch'
# alias gl='git log --oneline --graph --decorate'

# WSL-specific aliases
alias exp='explorer.exe'  # Open Windows Explorer
alias code='code-insiders'  # VS Code
alias clip='clip.exe'    # Windows clipboard

# Useful functions
mkcd() {
    mkdir -p "$1" && cd "$1"
}

# Extract various archive formats
extract() {
    if [ -f $1 ]; then
        case $1 in
            *.tar.bz2)   tar xjf $1     ;;
            *.tar.gz)    tar xzf $1     ;;
            *.bz2)       bunzip2 $1     ;;
            *.rar)       unrar e $1     ;;
            *.gz)        gunzip $1      ;;
            *.tar)       tar xf $1      ;;
            *.tbz2)      tar xjf $1     ;;
            *.tgz)       tar xzf $1     ;;
            *.zip)       unzip $1       ;;
            *.Z)         uncompress $1  ;;
            *.7z)        7z x $1        ;;
            *)          echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# Enhanced PATH for development tools
export PATH="$HOME/.local/bin:$PATH"
export PATH="$HOME/.composer/vendor/bin:$PATH"

# Set default editor
export EDITOR='vim'
export VISUAL='vim'

# Enable programmable completion
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# Custom prompt with git branch
parse_git_branch() {
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
}
export PS1="\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[33m\]\$(parse_git_branch)\[\033[00m\]\$ " 