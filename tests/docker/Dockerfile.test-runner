# Test Runner with PowerShell and Pester
FROM mcr.microsoft.com/powershell:7.4-ubuntu-22.04

# Install additional tools for testing
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    git \
    jq \
    sqlite3 \
    python3 \
    python3-pip \
    nodejs \
    npm \
    vim \
    nano \
    tree \
    file \
    unzip \
    zip \
    netcat-openbsd \
    && rm -rf /var/lib/apt/lists/*

# Install PowerShell modules for testing
# Create the modules directory first
RUN mkdir -p /usr/local/share/powershell/Modules

# Install PowerShell modules with proper error handling
RUN pwsh -Command " \
    Set-PSRepository -Name PSGallery -InstallationPolicy Trusted; \
    Install-Module -Name Pester -Force -Scope AllUsers -MinimumVersion 5.0.0 -AcceptLicense -SkipPublisherCheck; \
    Install-Module -Name PSScriptAnalyzer -Force -Scope AllUsers -AcceptLicense -SkipPublisherCheck; \
    Install-Module -Name ImportExcel -Force -Scope AllUsers -AcceptLicense -SkipPublisherCheck; \
    "

# Verify installations and create a simple test
RUN pwsh -Command " \
    Write-Host 'Verifying PowerShell modules installation...'; \
    \$modules = Get-Module -ListAvailable -Name Pester, PSScriptAnalyzer, ImportExcel; \
    \$modules | Select-Object Name, Version | Format-Table; \
    if (-not (Get-Module -ListAvailable -Name Pester)) { \
        throw 'Pester module not found after installation'; \
    } else { \
        Write-Host 'Pester installation verified successfully'; \
    } \
    "

# Install Docker CLI for container management
RUN curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg && \
    echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu jammy stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null && \
    apt-get update && apt-get install -y docker-ce-cli && rm -rf /var/lib/apt/lists/*

# Create test directories
RUN mkdir -p /test-results/unit && \
    mkdir -p /test-results/integration && \
    mkdir -p /test-results/coverage && \
    mkdir -p /test-results/reports

# Set up PowerShell profile for testing
RUN mkdir -p /root/.config/powershell
COPY tests/mock-scripts/TestRunner.PowerShell_profile.ps1 /root/.config/powershell/Microsoft.PowerShell_profile.ps1

# Copy mock executables and make them available in PATH
COPY tests/mock-scripts/windows/ /usr/local/bin/mock-windows/
RUN chmod +x /usr/local/bin/mock-windows/* && \
    ln -sf /usr/local/bin/mock-windows/wsl.sh /usr/local/bin/wsl && \
    ln -sf /usr/local/bin/mock-windows/winget.sh /usr/local/bin/winget && \
    ln -sf /usr/local/bin/mock-windows/reg.sh /usr/local/bin/reg

# Copy test scripts and utilities
COPY tests/integration/ /tests/integration/
COPY tests/unit/ /tests/unit/
COPY tests/utilities/ /tests/utilities/
COPY tests/scripts/ /tests/scripts/

# Copy main module files to workspace for installation
COPY WindowsMelodyRecovery.psm1 /workspace/
COPY WindowsMelodyRecovery.psd1 /workspace/
COPY Private/ /workspace/Private/
COPY Public/ /workspace/Public/
COPY Config/ /workspace/Config/
COPY Templates/ /workspace/Templates/
COPY docs/ /workspace/docs/
COPY Install-Module.ps1 /workspace/

# Install the module using the proper installation script (now with Linux support)
RUN cd /workspace && pwsh -Command " \
    Write-Host 'Installing WindowsMelodyRecovery module using Install-Module.ps1...'; \
    ./Install-Module.ps1 -Force; \
    Write-Host 'Verifying module installation...'; \
    Import-Module WindowsMelodyRecovery -Force; \
    Get-Module WindowsMelodyRecovery; \
    Write-Host 'Module installation completed successfully'; \
    "

# Verify module installation
RUN pwsh -Command " \
    Write-Host 'Final verification of WindowsMelodyRecovery module...'; \
    Write-Host 'Available module paths:'; \
    \$env:PSModulePath -split ':' | ForEach-Object { Write-Host \"  - \$_\" }; \
    Write-Host 'Looking for WindowsMelodyRecovery module...'; \
    \$module = Get-Module -ListAvailable -Name WindowsMelodyRecovery; \
    if (\$module) { \
        Write-Host 'WindowsMelodyRecovery module found successfully'; \
        Write-Host \"Module path: \$(\$module.ModuleBase)\"; \
        Write-Host \"Module version: \$(\$module.Version)\"; \
        Import-Module WindowsMelodyRecovery -Force; \
        Write-Host 'Module imported successfully for testing'; \
        Get-Module WindowsMelodyRecovery | Select-Object Name, Version, ModuleBase; \
    } else { \
        Write-Host 'ERROR: WindowsMelodyRecovery module not found'; \
        Write-Host 'Available modules:'; \
        Get-Module -ListAvailable | Select-Object Name, ModuleBase | Format-Table; \
        exit 1; \
    } \
    "

# Create test runner script
COPY tests/scripts/run-tests.ps1 /tests/
COPY tests/scripts/test-orchestrator.ps1 /tests/
COPY tests/scripts/generate-reports.ps1 /tests/
COPY tests/scripts/simulate-installation.ps1 /tests/

# Set permissions
RUN chmod +x /tests/*.ps1

# Set working directory
WORKDIR /workspace

# Health check script
COPY tests/scripts/health-check.ps1 /usr/local/bin/
RUN chmod +x /usr/local/bin/health-check.ps1

# Default command
CMD ["pwsh", "/tests/test-orchestrator.ps1"] 