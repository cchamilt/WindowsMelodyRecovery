# Test Runner with PowerShell and Pester
FROM mcr.microsoft.com/powershell:7.4-ubuntu-22.04

# Install additional tools for testing
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    git \
    jq \
    sqlite3 \
    python3 \
    python3-pip \
    nodejs \
    npm \
    vim \
    nano \
    tree \
    file \
    unzip \
    zip \
    netcat-openbsd \
    && rm -rf /var/lib/apt/lists/*

# Install PowerShell modules for testing
# Create the modules directory first
RUN mkdir -p /usr/local/share/powershell/Modules

# Install PowerShell modules with proper error handling
RUN pwsh -Command " \
    Set-PSRepository -Name PSGallery -InstallationPolicy Trusted; \
    Install-Module -Name Pester -Force -Scope AllUsers -MinimumVersion 5.0.0 -AcceptLicense -SkipPublisherCheck; \
    Install-Module -Name PSScriptAnalyzer -Force -Scope AllUsers -AcceptLicense -SkipPublisherCheck; \
    Install-Module -Name ImportExcel -Force -Scope AllUsers -AcceptLicense -SkipPublisherCheck; \
    "

# Verify installations
RUN pwsh -Command " \
    Write-Host 'Verifying PowerShell modules installation...'; \
    \$modules = Get-Module -ListAvailable -Name Pester, PSScriptAnalyzer, ImportExcel; \
    \$modules | Select-Object Name, Version | Format-Table; \
    if (-not (Get-Module -ListAvailable -Name Pester)) { \
        throw 'Pester module not found after installation'; \
    } else { \
        Write-Host 'Pester installation verified successfully'; \
    } \
    "

# Install Docker CLI for container management
RUN curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg && \
    echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu jammy stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null && \
    apt-get update && apt-get install -y docker-ce-cli && rm -rf /var/lib/apt/lists/*

# Create test directories
RUN mkdir -p /test-results/unit && \
    mkdir -p /test-results/integration && \
    mkdir -p /test-results/coverage && \
    mkdir -p /test-results/reports

# Set up PowerShell profile for testing - copy only the profile script
RUN mkdir -p /root/.config/powershell
COPY tests/mock-scripts/TestRunner.PowerShell_profile.ps1 /root/.config/powershell/Microsoft.PowerShell_profile.ps1

# Copy mock executables and make them available in PATH
COPY tests/mock-scripts/windows/ /usr/local/bin/mock-windows/
RUN chmod +x /usr/local/bin/mock-windows/* && \
    ln -sf /usr/local/bin/mock-windows/wsl.sh /usr/local/bin/wsl && \
    ln -sf /usr/local/bin/mock-windows/winget.sh /usr/local/bin/winget && \
    ln -sf /usr/local/bin/mock-windows/reg.sh /usr/local/bin/reg

# Copy only the core test scripts needed for orchestration
COPY tests/scripts/run-tests.ps1 /tests/
COPY tests/scripts/test-orchestrator.ps1 /tests/
COPY tests/scripts/generate-reports.ps1 /tests/
COPY tests/scripts/health-check.ps1 /usr/local/bin/

# Set permissions
RUN chmod +x /tests/*.ps1 && chmod +x /usr/local/bin/health-check.ps1

# Set working directory to where the project will be mounted
WORKDIR /workspace

# Note: The project files are now mounted read-only at runtime via docker-compose
# This means code changes are immediately available without rebuilding containers!

# Default command - just keep container running for test execution
CMD ["tail", "-f", "/dev/null"] 