metadata:
  name: "Touchscreen Settings"
  description: "Backup and restore comprehensive touchscreen settings including Windows touch input configurations, pen and ink settings, touch calibration data, gesture settings, manufacturer-specific settings, device information, and driver details"
  author: "Windows Melody Recovery"
  version: "1.0.0"

prerequisites:
  - type: script
    name: "Touchscreen System Available"
    inline_script: |
      try {
          $touchscreenAvailable = $false
          
          # Check for touch-related registry keys
          $touchRegistryPaths = @(
              "HKCU:\Software\Microsoft\TouchPrediction",
              "HKCU:\Software\Microsoft\Touchscreen",
              "HKCU:\Software\Microsoft\TabletTip",
              "HKCU:\Software\Microsoft\Windows\CurrentVersion\PenWorkspace",
              "HKCU:\Software\Microsoft\Windows\CurrentVersion\TouchInput"
          )
          
          foreach ($path in $touchRegistryPaths) {
              if (Test-Path $path) {
                  $touchscreenAvailable = $true
                  break
              }
          }
          
          # Check for touch-related devices
          if (!$touchscreenAvailable) {
              try {
                  $touchDevices = Get-PnpDevice | Where-Object { 
                      ($_.Class -eq "Touchscreen" -or $_.Class -eq "HIDClass" -or $_.Class -eq "Mouse") -and 
                      ($_.FriendlyName -match "touch|screen|digitizer|pen|stylus" -or
                       $_.Manufacturer -match "wacom|synaptics|elan|hid|microsoft|n-trig|atmel")
                  }
                  if ($touchDevices) {
                      $touchscreenAvailable = $true
                  }
              } catch {
                  # Continue checking
              }
          }
          
          # Check for touch-related services
          if (!$touchscreenAvailable) {
              try {
                  $touchServices = Get-Service | Where-Object {
                      $_.Name -match "Touch|TabletInput|Pen|Wacom|HID" -or
                      $_.DisplayName -match "Touch|Screen|Tablet|Pen|Stylus|Wacom|Handwriting|Ink"
                  }
                  if ($touchServices) {
                      $touchscreenAvailable = $true
                  }
              } catch {
                  # Continue
              }
          }
          
          if ($touchscreenAvailable) {
              Write-Output "Touchscreen system available"
          } else {
              Write-Output "Touchscreen system not available"
          }
      } catch {
          Write-Output "Touchscreen system not available"
      }
    expected_output: "Touchscreen system available"
    on_missing: warn

registry:
  # Touch Prediction Settings
  - name: "Touch Prediction User Settings"
    path: 'HKCU:\Software\Microsoft\TouchPrediction'
    type: key
    action: sync
    dynamic_state_path: "registry/touch_prediction_user.json"

  - name: "Touch Prediction System Settings"
    path: 'HKLM:\SOFTWARE\Microsoft\TouchPrediction'
    type: key
    action: sync
    dynamic_state_path: "registry/touch_prediction_system.json"

  # Touchscreen Calibration Settings
  - name: "Touchscreen User Settings"
    path: 'HKCU:\Software\Microsoft\Touchscreen'
    type: key
    action: sync
    dynamic_state_path: "registry/touchscreen_user.json"

  - name: "Touchscreen System Settings"
    path: 'HKLM:\SOFTWARE\Microsoft\Touchscreen'
    type: key
    action: sync
    dynamic_state_path: "registry/touchscreen_system.json"

  # Tablet PC Settings
  - name: "Tablet Tip User Settings"
    path: 'HKCU:\Software\Microsoft\TabletTip'
    type: key
    action: sync
    dynamic_state_path: "registry/tablet_tip_user.json"

  - name: "Tablet Tip System Settings"
    path: 'HKLM:\SOFTWARE\Microsoft\TabletTip'
    type: key
    action: sync
    dynamic_state_path: "registry/tablet_tip_system.json"

  # Windows Ink Settings
  - name: "Pen Workspace User Settings"
    path: 'HKCU:\Software\Microsoft\Windows\CurrentVersion\PenWorkspace'
    type: key
    action: sync
    dynamic_state_path: "registry/pen_workspace_user.json"

  - name: "Pen Workspace System Settings"
    path: 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\PenWorkspace'
    type: key
    action: sync
    dynamic_state_path: "registry/pen_workspace_system.json"

  # Touch Input Settings
  - name: "Touch Input User Settings"
    path: 'HKCU:\Software\Microsoft\Windows\CurrentVersion\TouchInput'
    type: key
    action: sync
    dynamic_state_path: "registry/touch_input_user.json"

  - name: "Touch Input System Settings"
    path: 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\TouchInput'
    type: key
    action: sync
    dynamic_state_path: "registry/touch_input_system.json"

  # Touch Feedback Settings
  - name: "Touch Feedback User Settings"
    path: 'HKCU:\Control Panel\TouchFeedback'
    type: key
    action: sync
    dynamic_state_path: "registry/touch_feedback_user.json"

  - name: "Touch Feedback System Settings"
    path: 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\TouchFeedback'
    type: key
    action: sync
    dynamic_state_path: "registry/touch_feedback_system.json"

  # Touch Gestures
  - name: "Touch Gestures User Settings"
    path: 'HKCU:\Software\Microsoft\Windows\CurrentVersion\TouchGestures'
    type: key
    action: sync
    dynamic_state_path: "registry/touch_gestures_user.json"

  - name: "Touch Gestures System Settings"
    path: 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\TouchGestures'
    type: key
    action: sync
    dynamic_state_path: "registry/touch_gestures_system.json"

  # Pen Settings
  - name: "Pen User Settings"
    path: 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Pen'
    type: key
    action: sync
    dynamic_state_path: "registry/pen_user.json"

  - name: "Pen System Settings"
    path: 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Pen'
    type: key
    action: sync
    dynamic_state_path: "registry/pen_system.json"

  # Handwriting Recognition
  - name: "Handwriting User Settings"
    path: 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Handwriting'
    type: key
    action: sync
    dynamic_state_path: "registry/handwriting_user.json"

  - name: "Handwriting System Settings"
    path: 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Handwriting'
    type: key
    action: sync
    dynamic_state_path: "registry/handwriting_system.json"

  # Touch Services Registry
  - name: "TouchScreen Service Settings"
    path: 'HKLM:\SYSTEM\CurrentControlSet\Services\TouchScreen'
    type: key
    action: sync
    dynamic_state_path: "registry/service_touchscreen.json"

  - name: "HidIr Service Settings"
    path: 'HKLM:\SYSTEM\CurrentControlSet\Services\HidIr'
    type: key
    action: sync
    dynamic_state_path: "registry/service_hidir.json"

  # Additional Touch Services
  - name: "TabletInputService Settings"
    path: 'HKLM:\SYSTEM\CurrentControlSet\Services\TabletInputService'
    type: key
    action: sync
    dynamic_state_path: "registry/service_tablet_input.json"

  - name: "Touch Keyboard Service Settings"
    path: 'HKLM:\SYSTEM\CurrentControlSet\Services\TouchKeyboardAndHandwritingPanelService'
    type: key
    action: sync
    dynamic_state_path: "registry/service_touch_keyboard.json"

files:
  # Touch Calibration Data
  - name: "Touch Calibration Data"
    path: "%WINDIR%\\System32\\drivers\\UMDF\\touch.cal"
    type: file
    action: sync
    dynamic_state_path: "files/touch_calibration.json"

  # Pen and Ink Settings
  - name: "Pen Settings Data"
    path: "%USERPROFILE%\\AppData\\Roaming\\Microsoft\\Windows\\Pen"
    type: directory
    action: sync
    dynamic_state_path: "files/pen_settings"

  # Touch Input Panel Data
  - name: "Touch Input Panel Data"
    path: "%USERPROFILE%\\AppData\\Roaming\\Microsoft\\InputPersonalization"
    type: directory
    action: sync
    dynamic_state_path: "files/input_personalization"

applications:
  # Touchscreen Device Information
  - name: "Touchscreen Devices"
    discovery_command: |
      try {
          $touchscreenDevices = Get-PnpDevice | Where-Object { 
              ($_.Class -eq "Touchscreen" -or $_.Class -eq "HIDClass" -or $_.Class -eq "Mouse") -and 
              ($_.FriendlyName -match "touch|screen|digitizer|pen|stylus" -or
               $_.Manufacturer -match "wacom|synaptics|elan|hid|microsoft|n-trig|atmel")
          } | Select-Object InstanceId, FriendlyName, Manufacturer, Status, Class, DeviceID | ConvertTo-Json -Depth 10
          if (-not $touchscreenDevices) { $touchscreenDevices = "[]" }
          $touchscreenDevices
      } catch {
          Write-Output "[]"
      }
    parse_script: |
      $devices = $State | ConvertFrom-Json
      return @{
          TouchscreenDeviceCount = $devices.Count
          EnabledDevices = ($devices | Where-Object { $_.Status -eq "OK" }).Count
          Manufacturers = $devices | Group-Object Manufacturer | ForEach-Object { "$($_.Name): $($_.Count)" }
          DeviceTypes = $devices | Group-Object Class | ForEach-Object { "$($_.Name): $($_.Count)" }
      }
    dynamic_state_path: "applications/devices.json"

  # Touchscreen Services
  - name: "Touchscreen Services"
    discovery_command: |
      try {
          $services = Get-Service | Where-Object {
              $_.Name -match "Touch|TabletInput|Pen|Wacom|HID" -or
              $_.DisplayName -match "Touch|Screen|Tablet|Pen|Stylus|Wacom|Handwriting|Ink"
          } | Select-Object Name, DisplayName, Status, StartType | ConvertTo-Json -Depth 10
          if (-not $services) { $services = "[]" }
          $services
      } catch {
          Write-Output "[]"
      }
    parse_script: |
      $services = $State | ConvertFrom-Json
      return @{
          TouchscreenServiceCount = $services.Count
          RunningServices = ($services | Where-Object { $_.Status -eq "Running" }).Count
          AutomaticServices = ($services | Where-Object { $_.StartType -eq "Automatic" }).Count
          ServiceNames = $services | ForEach-Object { $_.Name }
      }
    dynamic_state_path: "applications/services.json"

  # Touch Drivers Information
  - name: "Touch Drivers"
    discovery_command: |
      try {
          $drivers = Get-WmiObject Win32_SystemDriver | Where-Object {
              $_.Name -match "Touch|HID|Digitizer|Pen|Wacom" -or
              $_.DisplayName -match "Touch|Screen|Digitizer|Pen|Stylus|Wacom|HID"
          } | Select-Object Name, DisplayName, State, Status, StartMode | ConvertTo-Json -Depth 10
          if (-not $drivers) { $drivers = "[]" }
          $drivers
      } catch {
          Write-Output "[]"
      }
    parse_script: |
      $drivers = $State | ConvertFrom-Json
      return @{
          TouchDriverCount = $drivers.Count
          RunningDrivers = ($drivers | Where-Object { $_.State -eq "Running" }).Count
          SystemDrivers = ($drivers | Where-Object { $_.StartMode -eq "System" }).Count
          DriverNames = $drivers | ForEach-Object { $_.Name }
      }
    dynamic_state_path: "applications/drivers.json"

cleanup:
  - name: "Touchscreen Settings Notification"
    type: script
    inline_script: |
      Write-Host "Touchscreen settings have been restored." -ForegroundColor Green
      Write-Host "Some touch calibration changes may require a restart to take effect." -ForegroundColor Yellow
      Write-Host "Touch and pen input will be active immediately." -ForegroundColor Green
