metadata:
  name: Display Settings
  description: Template for backing up and restoring display configuration.
  version: "1.0"
  author: Windows Melody Recovery

prerequisites:
  - type: script
    name: "Windows Display System Available"
    inline_script: |
      try {
          Get-Command Get-CimInstance -ErrorAction Stop | Out-Null
          Get-Command Get-WmiObject -ErrorAction Stop | Out-Null
          Write-Output "Display system available"
      } catch {
          Write-Output "Display system not available"
      }
    expected_output: "Display system available"
    on_missing: warn

registry:
  # Display settings
  - name: Control Panel Desktop Settings
    path: 'HKCU:\Control Panel\Desktop'
    type: key
    action: sync
    dynamic_state_path: "system_settings/control_panel_desktop.json"

  - name: Graphics Drivers Configuration
    path: 'HKLM:\SYSTEM\CurrentControlSet\Control\GraphicsDrivers'
    type: key
    action: sync
    dynamic_state_path: "system_settings/graphics_drivers.json"

  - name: Video Configuration
    path: 'HKLM:\SYSTEM\CurrentControlSet\Control\Video'
    type: key
    action: sync
    dynamic_state_path: "system_settings/video_config.json"

  - name: Hardware Profile Video Settings
    path: 'HKLM:\SYSTEM\CurrentControlSet\Hardware Profiles\Current\System\CurrentControlSet\Control\Video'
    type: key
    action: sync
    dynamic_state_path: "system_settings/hardware_profile_video.json"

  # Visual Effects and DWM
  - name: Visual Effects Settings
    path: 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects'
    type: key
    action: sync
    dynamic_state_path: "user_configs/visual_effects.json"

  - name: Desktop Window Manager Settings
    path: 'HKCU:\Software\Microsoft\Windows\DWM'
    type: key
    action: sync
    dynamic_state_path: "user_configs/dwm_settings.json"

  # Color calibration
  - name: ICM Color Management (HKLM)
    path: 'HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ICM'
    type: key
    action: sync
    dynamic_state_path: "system_settings/icm_system.json"

  - name: ICM Color Management (HKCU)
    path: 'HKCU:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ICM'
    type: key
    action: sync
    dynamic_state_path: "user_configs/icm_user.json"

  # DPI settings
  - name: Window Metrics
    path: 'HKCU:\Control Panel\Desktop\WindowMetrics'
    type: key
    action: sync
    dynamic_state_path: "user_configs/window_metrics.json"

  - name: Theme Manager Settings
    path: 'HKCU:\Software\Microsoft\Windows\CurrentVersion\ThemeManager'
    type: key
    action: sync
    dynamic_state_path: "user_configs/theme_manager.json"

  # HDR and advanced color
  - name: Video Settings
    path: 'HKCU:\Software\Microsoft\Windows\CurrentVersion\VideoSettings'
    type: key
    action: sync
    dynamic_state_path: "user_configs/video_settings.json"

  - name: HDR Configuration
    path: 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\HDR'
    type: key
    action: sync
    dynamic_state_path: "system_settings/hdr_config.json"

files:
  - name: Color Profiles Directory
    path: '%SystemRoot%\System32\spool\drivers\color'
    type: directory
    action: sync
    dynamic_state_path: "files/color_profiles"
    encrypt: false

applications:
  - name: Video Controllers Information
    type: custom
    dynamic_state_path: "system_info/video_controllers.json"
    discovery_command: 'Get-CimInstance -Namespace root\cimv2 -ClassName Win32_VideoController'
    parse_script: |
      param([object]$VideoControllers)
      try {
          $controllers = $VideoControllers | Select-Object -Property *
          $result = $controllers | ConvertTo-Json -Depth 10
          return $result
      } catch {
          Write-Warning "Failed to parse video controllers: $_"
          return "[]"
      }
    install_script: |
      param([string]$ControllersJson)
      # Video controller information is read-only, no installation needed
      Write-Host "Video controller information restored (informational only)"

  - name: Display Monitor Information  
    type: custom
    dynamic_state_path: "system_info/displays.json"
    discovery_command: 'Get-WmiObject -Namespace root\wmi -Class WmiMonitorID'
    parse_script: |
      param([object]$MonitorData)
      try {
          $displays = $MonitorData | ForEach-Object {
              @{
                  ManufacturerName = if ($_.ManufacturerName) { [System.Text.Encoding]::ASCII.GetString($_.ManufacturerName).Trim([char]0) } else { "" }
                  ProductCodeID = if ($_.ProductCodeID) { [System.Text.Encoding]::ASCII.GetString($_.ProductCodeID).Trim([char]0) } else { "" }
                  SerialNumberID = if ($_.SerialNumberID) { [System.Text.Encoding]::ASCII.GetString($_.SerialNumberID).Trim([char]0) } else { "" }
                  UserFriendlyName = if ($_.UserFriendlyName) { [System.Text.Encoding]::ASCII.GetString($_.UserFriendlyName).Trim([char]0) } else { "" }
                  InstanceName = $_.InstanceName
              }
          }
          $result = $displays | ConvertTo-Json -Depth 10
          return $result
      } catch {
          Write-Warning "Failed to parse display information: $_"
          return "[]"
      }
    install_script: |
      param([string]$DisplaysJson)
      # Display monitor information is read-only, no installation needed
      Write-Host "Display monitor information restored (informational only)"

stages:
  post_update:
    - name: Apply Display Settings (Notification)
      type: script
      inline_script: |
        Write-Host "Display settings have been restored. Some changes may require a restart or re-login to take effect." -ForegroundColor Yellow
        Write-Host "To apply color profiles immediately, you may need to manually re-assign them in Display Settings." -ForegroundColor Yellow
      parameters: {} 