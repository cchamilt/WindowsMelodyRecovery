metadata:
  name: "Printer Settings"
  description: "Backup and restore printer configuration including printers, drivers, ports, default settings, and print preferences"
  author: "Windows Melody Recovery"
  version: "1.0.0"

prerequisites:
  - type: script
    name: "Printer System Available"
    inline_script: |
      try {
          Get-Command Get-Printer -ErrorAction Stop | Out-Null
          Write-Output "Printer system available"
      } catch {
          Write-Output "Printer system not available"
      }
    expected_output: "Printer system available"
    on_missing: warn

registry:
  # Print System Configuration
  - name: "Print System Printers"
    path: 'HKLM:\SYSTEM\CurrentControlSet\Control\Print\Printers'
    type: key
    action: sync
    dynamic_state_path: "registry/printers.yaml"

  - name: "Print Monitors"
    path: 'HKLM:\SYSTEM\CurrentControlSet\Control\Print\Monitors'
    type: key
    action: sync
    dynamic_state_path: "registry/monitors.yaml"

  - name: "Print Providers"
    path: 'HKLM:\SYSTEM\CurrentControlSet\Control\Print\Providers'
    type: key
    action: sync
    dynamic_state_path: "registry/providers.yaml"

  - name: "Print Environments"
    path: 'HKLM:\SYSTEM\CurrentControlSet\Control\Print\Environments'
    type: key
    action: sync
    dynamic_state_path: "registry/environments.yaml"

  - name: "NT Print Configuration"
    path: 'HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Print\Printers'
    type: key
    action: sync
    dynamic_state_path: "registry/nt_printers.yaml"

  - name: "NT Print Providers"
    path: 'HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Print\Providers'
    type: key
    action: sync
    dynamic_state_path: "registry/nt_providers.yaml"

  - name: "Printer Cache Settings"
    path: 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\VolumeCaches\Printer Cache'
    type: key
    action: sync
    dynamic_state_path: "registry/cache.yaml"

  # User Printer Settings
  - name: "User Printer Settings"
    path: 'HKCU:\Software\Microsoft\Windows NT\CurrentVersion\Windows'
    type: key
    action: sync
    dynamic_state_path: "registry/user_settings.yaml"

  - name: "User Printers"
    path: 'HKCU:\Printers'
    type: key
    action: sync
    dynamic_state_path: "registry/user_printers.yaml"

  - name: "Printer Ports"
    path: 'HKCU:\Software\Microsoft\Windows NT\CurrentVersion\PrinterPorts'
    type: key
    action: sync
    dynamic_state_path: "registry/printer_ports.yaml"

applications:
  # Installed Printers Discovery
  - name: "Installed Printers"
    type: custom
    discovery_command: |
      try {
          # Use timeout to prevent hanging on printer enumeration
          $timeout = 10  # 10 second timeout
          $job = Start-Job -ScriptBlock {
              Get-Printer -ErrorAction SilentlyContinue | Select-Object Name, DriverName, PortName, Shared, ShareName, Published, DeviceType, Status, Location, Comment, IsDefault
          }
          
          if (Wait-Job $job -Timeout $timeout) {
              $result = Receive-Job $job
              Remove-Job $job
              $result | ConvertTo-Json -Depth 5
          } else {
              Stop-Job $job
              Remove-Job $job
              Write-Warning "Printer discovery timed out after $timeout seconds"
              "[]"
          }
      } catch {
          Write-Warning "Could not retrieve printers: $_"
          "[]"
      }
    parse_script: |
      param($DiscoveryOutput)
      $applications = @()
      
      # Handle empty or null discovery output
      if ($DiscoveryOutput -ne $null) {
          # If it's a JSON string, parse it
          if ($DiscoveryOutput -is [string]) {
              try {
                  $DiscoveryOutput = $DiscoveryOutput | ConvertFrom-Json
              } catch {
                  Write-Verbose "Failed to parse JSON: $_"
                  return $applications
              }
          }
          
          # Ensure it's an array
          if ($DiscoveryOutput -isnot [array]) {
              $DiscoveryOutput = @($DiscoveryOutput)
          }
          
          if ($DiscoveryOutput.Count -gt 0) {
              foreach ($printer in $DiscoveryOutput) {
                  if ($printer -and $printer.Name) {
                      $safeName = if ($printer.Name) { $printer.Name -replace '[^a-zA-Z0-9]', '' } else { "Unknown" }
                      $applications += @{
                          Name = "Printer-$safeName"
                          Version = if ($printer.DriverName) { $printer.DriverName } else { "Unknown Driver" }
                          Status = if ($printer.Status) { $printer.Status } else { "Unknown" }
                          PrinterName = $printer.Name
                          DriverName = if ($printer.DriverName) { $printer.DriverName } else { "Unknown" }
                          PortName = if ($printer.PortName) { $printer.PortName } else { "Unknown" }
                          DeviceType = if ($printer.DeviceType) { $printer.DeviceType } else { "Unknown" }
                          Location = if ($printer.Location) { $printer.Location } else { "Unknown" }
                          Comment = if ($printer.Comment) { $printer.Comment } else { "None" }
                          IsShared = if ($printer.Shared -ne $null) { $printer.Shared } else { $false }
                          ShareName = if ($printer.ShareName) { $printer.ShareName } else { "None" }
                          IsPublished = if ($printer.Published -ne $null) { $printer.Published } else { $false }
                          IsDefault = if ($printer.IsDefault -ne $null) { $printer.IsDefault } else { $false }
                      }
                  }
              }
          }
      }
      
      return $applications
    dynamic_state_path: "printers.yaml"
    install_script: |
      param([string]$StateJson)
      $printers = $StateJson | ConvertFrom-Json
      if ($printers.Count -gt 0) {
          Write-Host "Printer information restored:" -ForegroundColor Green
          $defaultPrinter = $printers | Where-Object { $_.IsDefault }
          if ($defaultPrinter) {
              Write-Host "  Default Printer: $($defaultPrinter.PrinterName)" -ForegroundColor Cyan
          }
          
          Write-Host "  Installed Printers ($($printers.Count)):" -ForegroundColor Cyan
          foreach ($printer in $printers | Select-Object -First 10) {
              $statusColor = if ($printer.Status -eq "Normal") { "Green" } else { "Yellow" }
              Write-Host "    - $($printer.PrinterName)" -ForegroundColor Gray
              Write-Host "      Driver: $($printer.DriverName)" -ForegroundColor DarkGray
              Write-Host "      Port: $($printer.PortName)" -ForegroundColor DarkGray
              Write-Host "      Status: $($printer.Status)" -ForegroundColor $statusColor
              if ($printer.IsShared) {
                  Write-Host "      Shared as: $($printer.ShareName)" -ForegroundColor DarkGray
              }
          }
          if ($printers.Count -gt 10) {
              Write-Host "    ... and $($printers.Count - 10) more" -ForegroundColor Gray
          }
          
          Write-Host ""
          Write-Host "NOTE: Printer drivers and network connections may need to be manually restored." -ForegroundColor Yellow
      } else {
          Write-Host "No printer information found in backup" -ForegroundColor Yellow
      }

  # Printer Ports Discovery
  - name: "Printer Ports"
    type: custom
    discovery_command: |
      try {
          # Use timeout and limit to prevent hanging on network discovery
          $timeout = 10  # 10 second timeout
          $job = Start-Job -ScriptBlock {
              Get-PrinterPort -ErrorAction SilentlyContinue | Select-Object Name, HostAddress, PortNumber, Protocol, Description, SNMPEnabled, SNMPCommunity, PortMonitor
          }
          
          if (Wait-Job $job -Timeout $timeout) {
              $result = Receive-Job $job
              Remove-Job $job
              $result | ConvertTo-Json -Depth 5
          } else {
              Stop-Job $job
              Remove-Job $job
              Write-Warning "Printer port discovery timed out after $timeout seconds"
              "[]"
          }
      } catch {
          Write-Warning "Could not retrieve printer ports: $_"
          "[]"
      }
    parse_script: |
      param([string]$DiscoveryOutput)
      try {
          $portsData = $DiscoveryOutput | ConvertFrom-Json
          $applications = @()
          
          if ($portsData -and $portsData.Count -gt 0) {
              foreach ($port in $portsData) {
                  $safePortName = if ($port.Name) { $port.Name -replace '[^a-zA-Z0-9]', '' } else { "Unknown" }
                  $applications += @{
                      Name = "PrinterPort-$safePortName"
                      Version = "Port"
                      Status = "Available"
                      PortName = $port.Name
                      HostAddress = $port.HostAddress
                      PortNumber = $port.PortNumber
                      Protocol = $port.Protocol
                      Description = $port.Description
                      SNMPEnabled = $port.SNMPEnabled
                      SNMPCommunity = $port.SNMPCommunity
                      PortMonitor = $port.PortMonitor
                  }
              }
          }
          
          # Return the applications array directly (not as JSON string)
          return $applications
      } catch {
          Write-Warning "Failed to parse printer ports: $_"
          return @()
      }
    dynamic_state_path: "ports.yaml"
    install_script: |
      param([string]$StateJson)
      $ports = $StateJson | ConvertFrom-Json
      if ($ports.Count -gt 0) {
          Write-Host "Printer ports information restored:" -ForegroundColor Green
          
          $networkPorts = $ports | Where-Object { $_.Protocol -eq "TCP/IP" }
          $localPorts = $ports | Where-Object { $_.Protocol -ne "TCP/IP" }
          
          if ($networkPorts.Count -gt 0) {
              Write-Host "  Network Ports ($($networkPorts.Count)):" -ForegroundColor Cyan
              foreach ($port in $networkPorts | Select-Object -First 5) {
                  Write-Host "    - $($port.PortName): $($port.HostAddress):$($port.PortNumber)" -ForegroundColor Gray
                  if ($port.Description) {
                      Write-Host "      Description: $($port.Description)" -ForegroundColor DarkGray
                  }
              }
              if ($networkPorts.Count -gt 5) {
                  Write-Host "    ... and $($networkPorts.Count - 5) more" -ForegroundColor Gray
              }
          }
          
          if ($localPorts.Count -gt 0) {
              Write-Host "  Local Ports ($($localPorts.Count)):" -ForegroundColor Cyan
              foreach ($port in $localPorts | Select-Object -First 5) {
                  Write-Host "    - $($port.PortName): $($port.Protocol)" -ForegroundColor Gray
              }
              if ($localPorts.Count -gt 5) {
                  Write-Host "    ... and $($localPorts.Count - 5) more" -ForegroundColor Gray
              }
          }
      } else {
          Write-Host "No printer ports information found in backup" -ForegroundColor Yellow
      }

  # Printer Drivers Discovery
  - name: "Printer Drivers"
    type: custom
    discovery_command: |
      try {
          # Use timeout to prevent hanging on driver enumeration
          $timeout = 15  # 15 second timeout for drivers
          $job = Start-Job -ScriptBlock {
              Get-PrinterDriver -ErrorAction SilentlyContinue | Select-Object Name, Manufacturer, DriverVersion, Environment, PrinterEnvironment, InfPath, ConfigFile, DataFile, DriverPath, HelpFile
          }
          
          if (Wait-Job $job -Timeout $timeout) {
              $result = Receive-Job $job
              Remove-Job $job
              $result | ConvertTo-Json -Depth 5
          } else {
              Stop-Job $job
              Remove-Job $job
              Write-Warning "Printer driver discovery timed out after $timeout seconds"
              "[]"
          }
      } catch {
          Write-Warning "Could not retrieve printer drivers: $_"
          "[]"
      }
    parse_script: |
      param([string]$DiscoveryOutput)
      try {
          $driversData = $DiscoveryOutput | ConvertFrom-Json
          $applications = @()
          
          if ($driversData -and $driversData.Count -gt 0) {
              foreach ($driver in $driversData) {
                  $applications += @{
                      Name = "PrinterDriver-$($driver.Name)"
                      Version = if ($driver.DriverVersion) { $driver.DriverVersion } else { "Unknown" }
                      Status = "Installed"
                      DriverName = $driver.Name
                      Manufacturer = $driver.Manufacturer
                      Environment = $driver.Environment
                      PrinterEnvironment = $driver.PrinterEnvironment
                      InfPath = $driver.InfPath
                      ConfigFile = $driver.ConfigFile
                      DataFile = $driver.DataFile
                      DriverPath = $driver.DriverPath
                      HelpFile = $driver.HelpFile
                  }
              }
          }
          
          # Return the applications array directly (not as JSON string)
          return $applications
      } catch {
          Write-Warning "Failed to parse printer drivers: $_"
          return @()
      }
    dynamic_state_path: "drivers.yaml"
    install_script: |
      param([string]$StateJson)
      $drivers = $StateJson | ConvertFrom-Json
      if ($drivers.Count -gt 0) {
          Write-Host "Printer drivers information restored:" -ForegroundColor Green
          
          $manufacturers = $drivers | Group-Object Manufacturer | Sort-Object Count -Descending
          Write-Host "  Drivers by Manufacturer:" -ForegroundColor Cyan
          foreach ($mfg in $manufacturers | Select-Object -First 5) {
              Write-Host "    - $($mfg.Name): $($mfg.Count) drivers" -ForegroundColor Gray
          }
          if ($manufacturers.Count -gt 5) {
              Write-Host "    ... and $($manufacturers.Count - 5) more manufacturers" -ForegroundColor Gray
          }
          
          Write-Host "  Total Drivers: $($drivers.Count)" -ForegroundColor Cyan
          
          $environments = $drivers | Group-Object Environment | Sort-Object Count -Descending
          if ($environments.Count -gt 1) {
              Write-Host "  Environments: $($environments.Name -join ', ')" -ForegroundColor Cyan
          }
          
          Write-Host ""
          Write-Host "NOTE: Printer drivers may need to be reinstalled from manufacturer sources." -ForegroundColor Yellow
      } else {
          Write-Host "No printer drivers information found in backup" -ForegroundColor Yellow
      }

  # Printer Preferences Discovery
  - name: "Printer Preferences"
    type: custom
    discovery_command: |
      try {
          # Use timeout and registry-based approach for faster, more reliable discovery
          $timeout = 8  # 8 second timeout
          $job = Start-Job -ScriptBlock {
              try {
                  $printers = Get-Printer -ErrorAction SilentlyContinue
                  $defaultPrinter = $printers | Where-Object IsDefault
                  
                  @{
                      DefaultPrinter = if ($defaultPrinter) { $defaultPrinter.Name } else { $null }
                      PrinterCount = if ($printers) { $printers.Count } else { 0 }
                      NetworkPrinterCount = if ($printers) { ($printers | Where-Object { $_.Type -eq "Connection" }).Count } else { 0 }
                      LocalPrinterCount = if ($printers) { ($printers | Where-Object { $_.Type -eq "Local" }).Count } else { 0 }
                  }
              } catch {
                  @{
                      DefaultPrinter = $null
                      PrinterCount = 0
                      NetworkPrinterCount = 0
                      LocalPrinterCount = 0
                  }
              }
          }
          
          if (Wait-Job $job -Timeout $timeout) {
              $result = Receive-Job $job
              Remove-Job $job
              
              # Add registry-based settings (these are fast and reliable)
              $deviceSetting = Get-ItemProperty -Path "HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows" -Name "Device" -ErrorAction SilentlyContinue
              $printerPorts = Get-ItemProperty -Path "HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\PrinterPorts" -ErrorAction SilentlyContinue
              
              $result.DeviceSetting = if ($deviceSetting) { $deviceSetting.Device } else { $null }
              $result.PrinterPorts = $printerPorts
              
              $result | ConvertTo-Json -Depth 5
          } else {
              Stop-Job $job
              Remove-Job $job
              Write-Warning "Printer preferences discovery timed out after $timeout seconds"
              
              # Fallback to just registry settings
              $deviceSetting = Get-ItemProperty -Path "HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows" -Name "Device" -ErrorAction SilentlyContinue
              $printerPorts = Get-ItemProperty -Path "HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\PrinterPorts" -ErrorAction SilentlyContinue
              
              @{
                  DefaultPrinter = $null
                  DeviceSetting = if ($deviceSetting) { $deviceSetting.Device } else { $null }
                  PrinterPorts = $printerPorts
                  PrinterCount = 0
                  NetworkPrinterCount = 0
                  LocalPrinterCount = 0
              } | ConvertTo-Json -Depth 5
          }
      } catch {
          Write-Warning "Could not retrieve printer preferences: $_"
          "{}"
      }
    parse_script: |
      param([string]$DiscoveryOutput)
      try {
          $prefsData = $DiscoveryOutput | ConvertFrom-Json
          $applications = @()
          
          if ($prefsData) {
              $applications += @{
                  Name = "PrinterPreferences"
                  Version = "Settings"
                  Status = "Configured"
                  DefaultPrinter = $prefsData.DefaultPrinter
                  DeviceSetting = $prefsData.DeviceSetting
                  PrinterCount = $prefsData.PrinterCount
                  NetworkPrinterCount = $prefsData.NetworkPrinterCount
                  LocalPrinterCount = $prefsData.LocalPrinterCount
                  HasDefaultPrinter = [bool]$prefsData.DefaultPrinter
                  PortCount = if ($prefsData.PrinterPorts) { 
                      ($prefsData.PrinterPorts | Get-Member -MemberType NoteProperty | Where-Object { $_.Name -ne "PSPath" -and $_.Name -ne "PSParentPath" -and $_.Name -ne "PSChildName" -and $_.Name -ne "PSDrive" -and $_.Name -ne "PSProvider" }).Count 
                  } else { 0 }
              }
          }
          
          # Return the applications array directly (not as JSON string)
          return $applications
      } catch {
          Write-Warning "Failed to parse printer preferences: $_"
          return @()
      }
    dynamic_state_path: "preferences.yaml"
    install_script: |
      param([string]$StateJson)
      $prefs = $StateJson | ConvertFrom-Json
      if ($prefs.Count -gt 0) {
          $pref = $prefs[0]  # Should only be one preferences object
          Write-Host "Printer preferences information restored:" -ForegroundColor Green
          
          if ($pref.HasDefaultPrinter) {
              Write-Host "  Default Printer: $($pref.DefaultPrinter)" -ForegroundColor Cyan
          } else {
              Write-Host "  No default printer was set" -ForegroundColor Yellow
          }
          
          Write-Host "  Printer Summary:" -ForegroundColor Cyan
          Write-Host "    - Total Printers: $($pref.PrinterCount)" -ForegroundColor Gray
          if ($pref.LocalPrinterCount -gt 0) {
              Write-Host "    - Local Printers: $($pref.LocalPrinterCount)" -ForegroundColor Gray
          }
          if ($pref.NetworkPrinterCount -gt 0) {
              Write-Host "    - Network Printers: $($pref.NetworkPrinterCount)" -ForegroundColor Gray
          }
          if ($pref.PortCount -gt 0) {
              Write-Host "    - Configured Ports: $($pref.PortCount)" -ForegroundColor Gray
          }
          
          if ($pref.DeviceSetting) {
              Write-Host "  Device Setting: $($pref.DeviceSetting)" -ForegroundColor Gray
          }
      } else {
          Write-Host "No printer preferences information found in backup" -ForegroundColor Yellow
      } 