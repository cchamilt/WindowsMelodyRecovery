metadata:
  name: Winget Applications
  description: Template for managing installed Winget applications.
  version: "1.0"
  author: Windows Melody Recovery

prerequisites:
  - type: application
    name: "Winget Package Manager"
    check_command: "winget --version"
    expected_output: '^v?\d+\.\d+\.\d+'
    on_missing: fail_backup

applications:
  - name: Installed Winget Applications
    type: winget
    dynamic_state_path: "applications/winget-installed.json"
    discovery_command: "winget list --source winget"
    parse_script: |
      param([string]$WingetListOutput)
      $apps = @()
      $lines = $WingetListOutput -split "`n"
      # Skip header lines, typically first 2-3 lines depending on winget version
      $dataLines = $lines | Select-Object -Skip 2

      foreach ($line in $dataLines) {
          # Regex to capture Name, Id, Version from typical winget list output
          # Example: "App Name              App.Id         1.0.0.0"
          if ($line -match '^(?<Name>.+?)\s{2,}(?<Id>\S+)\s{2,}(?<Version>\S+)') {
              $apps += @{ Name = $($Matches.Name.Trim()); Id = $($Matches.Id); Version = $($Matches.Version) }
          } elseif ($line -match '^(?<Name>.+?)\s{2,}(?<Id>\S+)\s{2,}\S+\s{2,}(?<Version>\S+)') {
              # Alternative regex for different column arrangements (e.g., source column present)
              $apps += @{ Name = $($Matches.Name.Trim()); Id = $($Matches.Id); Version = $($Matches.Version) }
          }
      }
      $apps | ConvertTo-Json -Compress
    install_script: |
      param([string]$AppListJson)
      $apps = $AppListJson | ConvertFrom-Json
      foreach ($app in $apps) {
          Write-Host "Installing $($app.Name) (ID: $($app.Id), Version: $($app.Version)) with Winget..."
          try {
              # Use --force to accept agreements and suppress prompts
              winget install --id "$($app.Id)" --version "$($app.Version)" --accept-source-agreements --silent -ErrorAction Stop
              Write-Host "  Successfully installed $($app.Name)."
          } catch {
              Write-Warning "  Failed to install $($app.Name): $($_.Exception.Message)"
          }
      }
    uninstall_script: |
      param([string]$AppListJson)
      $apps = $AppListJson | ConvertFrom-Json
      foreach ($app in $apps) {
          Write-Host "Uninstalling $($app.Name) (ID: $($app.Id)) with Winget..."
          try {
              # Use --force to suppress prompts
              winget uninstall --id "$($app.Id)" --force -ErrorAction Stop
              Write-Host "  Successfully uninstalled $($app.Name)."
          } catch {
              Write-Warning "  Failed to uninstall $($app.Name): $($_.Exception.Message)"
          }
      } 