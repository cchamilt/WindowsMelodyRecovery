metadata:
  name: "Windows Features and Capabilities Backup"
  description: "Comprehensive backup of Windows Features, capabilities, server features, and system components"
  version: "1.0.0"
  category: "System Configuration"
  author: "WindowsMelodyRecovery"
  tags: ["windows-features", "capabilities", "optional-features", "server-features", "appx", "updates", "dism"]

prerequisites:
  - type: script
    name: "Administrative Privileges Required"
    inline_script: |
      try {
          $currentPrincipal = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())
          $isAdmin = $currentPrincipal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
          
          if ($isAdmin) {
              Write-Output "Administrative privileges confirmed"
          } else {
              Write-Output "Administrative privileges required for Windows Features backup"
          }
      } catch {
          Write-Output "Unable to verify administrative privileges"
      }
    expected_output: "Administrative privileges confirmed"
    on_missing: warn

registry:
  # Windows Features Core Settings
  - name: "Optional Features Registry"
    path: 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\OptionalFeatures'
    type: key
    action: sync
    dynamic_state_path: "registry/optional_features.json"

  - name: "Optional Components Policies"
    path: 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\OptionalComponents'
    type: key
    action: sync
    dynamic_state_path: "registry/optional_components_policies.json"

  # Component Based Servicing
  - name: "Component Based Servicing"
    path: 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing'
    type: key
    action: sync
    dynamic_state_path: "registry/component_based_servicing.json"

  - name: "Windows Features Registry"
    path: 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Features'
    type: key
    action: sync
    dynamic_state_path: "registry/features.json"

  # Feature Staging and Services
  - name: "Feature Staging Settings"
    path: 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Setup\FeatureStaging'
    type: key
    action: sync
    dynamic_state_path: "registry/feature_staging.json"

  - name: "TrustedInstaller Service"
    path: 'HKLM:\SYSTEM\CurrentControlSet\Services\TrustedInstaller'
    type: key
    action: sync
    dynamic_state_path: "registry/trusted_installer.json"

  # Windows Update and Servicing
  - name: "Windows Update Services Pending"
    path: 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate\Services\Pending'
    type: key
    action: sync
    dynamic_state_path: "registry/windows_update_pending.json"

  - name: "Servicing Settings"
    path: 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Servicing'
    type: key
    action: sync
    dynamic_state_path: "registry/servicing.json"

  # Feature on Demand and Policies
  - name: "Servicing Policies"
    path: 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Servicing'
    type: key
    action: sync
    dynamic_state_path: "registry/servicing_policies.json"

  - name: "Windows Update Policies"
    path: 'HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate'
    type: key
    action: sync
    dynamic_state_path: "registry/windows_update_policies.json"

  # DISM Settings
  - name: "DISM Settings"
    path: 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\DISM'
    type: key
    action: sync
    dynamic_state_path: "registry/dism.json"

  # Windows Subsystem Settings
  - name: "Linux Subsystem Settings"
    path: 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Lxss'
    type: key
    action: sync
    dynamic_state_path: "registry/lxss.json"

  - name: "LxssManager Service"
    path: 'HKLM:\SYSTEM\CurrentControlSet\Services\LxssManager'
    type: key
    action: sync
    dynamic_state_path: "registry/lxss_manager.json"

applications:
  # Windows Optional Features
  - name: "Windows Optional Features"
    dynamic_state_path: "optional_features.json"
    discovery_command: |
      try {
          $allFeatures = Get-WindowsOptionalFeature -Online | Select-Object FeatureName, State, Description
          $enabledFeatures = $allFeatures | Where-Object { $_.State -eq "Enabled" }
          
          $result = @{
              AllFeatures = $allFeatures
              EnabledFeatures = $enabledFeatures
              FeatureCount = $allFeatures.Count
              EnabledCount = $enabledFeatures.Count
          }
          
          return $result
      } catch {
          return @{}
      }
    parse_script: |
      param($DiscoveryOutput)
      $applications = @()
      
      if ($DiscoveryOutput -and $DiscoveryOutput.AllFeatures) {
          foreach ($feature in $DiscoveryOutput.AllFeatures) {
              $applications += @{
                  Name = "OptionalFeature-$($feature.FeatureName)"
                  Version = "Windows Optional Feature"
                  Status = $feature.State
                  FeatureName = $feature.FeatureName
                  Description = $feature.Description
                  IsEnabled = ($feature.State -eq "Enabled")
              }
          }
      }
      
      return $applications
    install_script: |
      param($StateObject)
      if ($StateObject.Count -gt 0) {
          $enabledFeatures = $StateObject | Where-Object { $_.IsEnabled -eq $true }
          Write-Host "Windows Optional Features information restored:" -ForegroundColor Green
          Write-Host "  Total Features: $($StateObject.Count)" -ForegroundColor Cyan
          Write-Host "  Enabled Features: $($enabledFeatures.Count)" -ForegroundColor Cyan
          
          if ($enabledFeatures.Count -gt 0) {
              Write-Host "Enabled Features:" -ForegroundColor Yellow
              foreach ($feature in $enabledFeatures) {
                  Write-Host "  - $($feature.FeatureName): $($feature.Description)" -ForegroundColor Gray
              }
          }
      } else {
          Write-Host "No Windows Optional Features found in backup" -ForegroundColor Yellow
      }

  # Windows Capabilities
  - name: "Windows Capabilities"
    dynamic_state_path: "capabilities.json"
    discovery_command: |
      try {
          $allCapabilities = Get-WindowsCapability -Online | Select-Object Name, State, Description
          $installedCapabilities = $allCapabilities | Where-Object { $_.State -eq "Installed" }
          
          $result = @{
              AllCapabilities = $allCapabilities
              InstalledCapabilities = $installedCapabilities
              CapabilityCount = $allCapabilities.Count
              InstalledCount = $installedCapabilities.Count
          }
          
          return $result
      } catch {
          return @{}
      }
    parse_script: |
      param($DiscoveryOutput)
      $applications = @()
      
      if ($DiscoveryOutput -and $DiscoveryOutput.AllCapabilities) {
          foreach ($capability in $DiscoveryOutput.AllCapabilities) {
              $applications += @{
                  Name = "Capability-$($capability.Name -replace '[^a-zA-Z0-9]', '')"
                  Version = "Windows Capability"
                  Status = $capability.State
                  CapabilityName = $capability.Name
                  Description = $capability.Description
                  IsInstalled = ($capability.State -eq "Installed")
              }
          }
      }
      
      return $applications
    install_script: |
      param($StateObject)
      if ($StateObject.Count -gt 0) {
          $installedCapabilities = $StateObject | Where-Object { $_.IsInstalled -eq $true }
          Write-Host "Windows Capabilities information restored:" -ForegroundColor Green
          Write-Host "  Total Capabilities: $($StateObject.Count)" -ForegroundColor Cyan
          Write-Host "  Installed Capabilities: $($installedCapabilities.Count)" -ForegroundColor Cyan
          
          if ($installedCapabilities.Count -gt 0) {
              Write-Host "Installed Capabilities:" -ForegroundColor Yellow
              foreach ($capability in $installedCapabilities) {
                  Write-Host "  - $($capability.CapabilityName)" -ForegroundColor Gray
                  if ($capability.Description) {
                      Write-Host "    Description: $($capability.Description)" -ForegroundColor DarkGray
                  }
              }
          }
      } else {
          Write-Host "No Windows Capabilities found in backup" -ForegroundColor Yellow
      }

  # Windows Server Features (if applicable)
  - name: "Windows Server Features"
    dynamic_state_path: "server_features.json"
    discovery_command: |
      try {
          $osInfo = Get-WmiObject -Class Win32_OperatingSystem
          if ($osInfo.ProductType -ne 1) {
              # This is a server OS
              $serverFeatures = Get-WindowsFeature | Where-Object { $_.Installed -eq $true }
              $result = @{
                  IsServer = $true
                  ServerFeatures = $serverFeatures | Select-Object Name, InstallState, Description
                  InstalledCount = $serverFeatures.Count
              }
              return $result
          } else {
              $result = @{
                  IsServer = $false
                  ServerFeatures = @()
                  InstalledCount = 0
              }
              return $result
          }
      } catch {
          return @{
              IsServer = $false
              ServerFeatures = @()
              InstalledCount = 0
          }
      }
    parse_script: |
      param($DiscoveryOutput)
      $applications = @()
      
      if ($DiscoveryOutput.IsServer -and $DiscoveryOutput.ServerFeatures) {
          foreach ($feature in $DiscoveryOutput.ServerFeatures) {
              $applications += @{
                  Name = "ServerFeature-$($feature.Name)"
                  Version = "Windows Server Feature"
                  Status = $feature.InstallState
                  FeatureName = $feature.Name
                  Description = $feature.Description
                  IsInstalled = ($feature.InstallState -eq "Installed")
              }
          }
      }
      
      return $applications
    install_script: |
      param($StateObject)
      if ($StateObject.Count -gt 0) {
          Write-Host "Windows Server Features information restored:" -ForegroundColor Green
          Write-Host "  Installed Server Features: $($StateObject.Count)" -ForegroundColor Cyan
          
          foreach ($feature in $StateObject) {
              Write-Host "  - $($feature.FeatureName): $($feature.Description)" -ForegroundColor Gray
          }
      } else {
          Write-Host "No Windows Server Features found in backup (likely client OS)" -ForegroundColor Yellow
      }

  # DISM Packages Information
  - name: "DISM Packages Information"
    dynamic_state_path: "dism_packages.json"
    discovery_command: |
      try {
          $dismOutput = dism /online /get-packages /format:table 2>&1
          $packages = @()
          
          # Parse DISM output
          $lines = $dismOutput -split "`n"
          foreach ($line in $lines) {
              if ($line -match "Package Identity : (.+)") {
                  $packageName = $matches[1].Trim()
                  $packages += @{
                      PackageIdentity = $packageName
                      Source = "DISM"
                  }
              }
          }
          
          $result = @{
              DISMOutput = $dismOutput -join "`n"
              ParsedPackages = $packages
              PackageCount = $packages.Count
          }
          
          return $result
      } catch {
          return @{
              DISMOutput = ""
              ParsedPackages = @()
              PackageCount = 0
          }
      }
    parse_script: |
      param($DiscoveryOutput)
      $applications = @()
      
      if ($DiscoveryOutput.ParsedPackages) {
          foreach ($package in $DiscoveryOutput.ParsedPackages) {
              $applications += @{
                  Name = "DISMPackage-$($package.PackageIdentity -replace '[^a-zA-Z0-9]', '')"
                  Version = "DISM Package"
                  Status = "Installed"
                  PackageIdentity = $package.PackageIdentity
                  Source = $package.Source
              }
          }
      }
      
      # Also include raw DISM output as metadata
      if ($DiscoveryOutput.DISMOutput) {
          $applications += @{
              Name = "DISM-RawOutput"
              Version = "DISM Command Output"
              Status = "Available"
              DISMOutput = $DiscoveryOutput.DISMOutput
              PackageCount = $DiscoveryOutput.PackageCount
          }
      }
      
      return $applications
    install_script: |
      param($StateObject)
      if ($StateObject.Count -gt 0) {
          $packages = $StateObject | Where-Object { $_.PackageIdentity }
          $rawOutput = $StateObject | Where-Object { $_.Name -eq "DISM-RawOutput" }
          
          Write-Host "DISM Packages information restored:" -ForegroundColor Green
          if ($rawOutput) {
              Write-Host "  Package Count: $($rawOutput.PackageCount)" -ForegroundColor Cyan
          }
          Write-Host "  Parsed Packages: $($packages.Count)" -ForegroundColor Cyan
      } else {
          Write-Host "No DISM packages information found in backup" -ForegroundColor Yellow
      }

  # Windows Updates Information
  - name: "Windows Updates Information"
    dynamic_state_path: "installed_updates.json"
    discovery_command: |
      try {
          $updatePackages = Get-HotFix | Select-Object Description, HotFixID, InstalledBy, InstalledOn
          $result = @{
              InstalledUpdates = $updatePackages
              UpdateCount = $updatePackages.Count
          }
          
          return $result
      } catch {
          return @{
              InstalledUpdates = @()
              UpdateCount = 0
          }
      }
    parse_script: |
      param($DiscoveryOutput)
      $applications = @()
      
      if ($DiscoveryOutput.InstalledUpdates) {
          foreach ($update in $DiscoveryOutput.InstalledUpdates) {
              $applications += @{
                  Name = "Update-$($update.HotFixID)"
                  Version = "Windows Update"
                  Status = "Installed"
                  HotFixID = $update.HotFixID
                  Description = $update.Description
                  InstalledBy = $update.InstalledBy
                  InstalledOn = $update.InstalledOn
              }
          }
      }
      
      return $applications
    install_script: |
      param($StateObject)
      if ($StateObject.Count -gt 0) {
          Write-Host "Windows Updates information restored:" -ForegroundColor Green
          Write-Host "  Installed Updates: $($StateObject.Count)" -ForegroundColor Cyan
          
          # Show recent updates
          $recentUpdates = $StateObject | Sort-Object InstalledOn -Descending | Select-Object -First 10
          Write-Host "Recent Updates:" -ForegroundColor Yellow
          foreach ($update in $recentUpdates) {
              Write-Host "  - $($update.HotFixID): $($update.Description)" -ForegroundColor Gray
              if ($update.InstalledOn) {
                  Write-Host "    Installed: $($update.InstalledOn)" -ForegroundColor DarkGray
              }
          }
      } else {
          Write-Host "No Windows Updates information found in backup" -ForegroundColor Yellow
      }

  # Windows Store Apps (AppX Packages)
  - name: "Windows Store Apps"
    dynamic_state_path: "appx_packages.json"
    discovery_command: |
      try {
          $appxPackages = Get-AppxPackage | Select-Object Name, PackageFullName, Version, Architecture, Publisher
          $result = @{
              AppXPackages = $appxPackages
              PackageCount = $appxPackages.Count
          }
          
          return $result
      } catch {
          return @{
              AppXPackages = @()
              PackageCount = 0
          }
      }
    parse_script: |
      param($DiscoveryOutput)
      $applications = @()
      
      if ($DiscoveryOutput.AppXPackages) {
          foreach ($package in $DiscoveryOutput.AppXPackages) {
              $applications += @{
                  Name = "AppX-$($package.Name)"
                  Version = $package.Version
                  Status = "Installed"
                  PackageName = $package.Name
                  PackageFullName = $package.PackageFullName
                  Architecture = $package.Architecture
                  Publisher = $package.Publisher
              }
          }
      }
      
      return $applications
    install_script: |
      param($StateObject)
      if ($StateObject.Count -gt 0) {
          Write-Host "Windows Store Apps information restored:" -ForegroundColor Green
          Write-Host "  AppX Packages: $($StateObject.Count)" -ForegroundColor Cyan
          
          # Group by publisher
          $groupedPackages = $StateObject | Group-Object Publisher | Sort-Object Count -Descending
          Write-Host "Top Publishers:" -ForegroundColor Yellow
          foreach ($group in $groupedPackages | Select-Object -First 5) {
              Write-Host "  - $($group.Name): $($group.Count) packages" -ForegroundColor Gray
          }
      } else {
          Write-Host "No Windows Store Apps information found in backup" -ForegroundColor Yellow
      }

  # System Information
  - name: "System Information"
    dynamic_state_path: "system_info.json"
    discovery_command: |
      try {
          $osInfo = Get-WmiObject -Class Win32_OperatingSystem
          $systemInfo = @{
              LastBackupDate = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
              OSVersion = $osInfo.Version
              OSBuildNumber = $osInfo.BuildNumber
              OSArchitecture = $osInfo.OSArchitecture
              ProductType = $osInfo.ProductType
              IsServer = ($osInfo.ProductType -ne 1)
              ServicePackMajorVersion = $osInfo.ServicePackMajorVersion
              ServicePackMinorVersion = $osInfo.ServicePackMinorVersion
              WindowsDirectory = $osInfo.WindowsDirectory
              SystemDirectory = $osInfo.SystemDirectory
              Caption = $osInfo.Caption
              Manufacturer = $osInfo.Manufacturer
              TotalPhysicalMemory = $osInfo.TotalVisibleMemorySize
          }
          
          return $systemInfo
      } catch {
          return @{}
      }
    parse_script: |
      param($DiscoveryOutput)
      $applications = @()
      
      if ($DiscoveryOutput -and $DiscoveryOutput.OSVersion) {
          $applications += @{
              Name = "SystemInfo-WindowsOS"
              Version = $DiscoveryOutput.OSVersion
              Status = "Active"
              OSBuildNumber = $DiscoveryOutput.OSBuildNumber
              OSArchitecture = $DiscoveryOutput.OSArchitecture
              IsServer = $DiscoveryOutput.IsServer
              WindowsDirectory = $DiscoveryOutput.WindowsDirectory
              SystemDirectory = $DiscoveryOutput.SystemDirectory
              Caption = $DiscoveryOutput.Caption
              Manufacturer = $DiscoveryOutput.Manufacturer
              TotalPhysicalMemory = $DiscoveryOutput.TotalPhysicalMemory
              LastBackupDate = $DiscoveryOutput.LastBackupDate
          }
      }
      
      return $applications
    install_script: |
      param($StateObject)
      if ($StateObject.Count -gt 0) {
          $info = $StateObject[0]
          Write-Host "System Information restored:" -ForegroundColor Green
          Write-Host "  OS: $($info.Caption)" -ForegroundColor Cyan
          Write-Host "  Version: $($info.Version) (Build $($info.OSBuildNumber))" -ForegroundColor Cyan
          Write-Host "  Architecture: $($info.OSArchitecture)" -ForegroundColor Cyan
          Write-Host "  Server OS: $($info.IsServer)" -ForegroundColor Cyan
          Write-Host "  Windows Directory: $($info.WindowsDirectory)" -ForegroundColor Cyan
          Write-Host "  Last Backup: $($info.LastBackupDate)" -ForegroundColor Cyan
      } else {
          Write-Host "No system information found in backup" -ForegroundColor Yellow
      }