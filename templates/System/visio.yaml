metadata:
  name: "Microsoft Visio Settings Backup"
  description: "Comprehensive backup of Microsoft Visio settings, configurations, and customizations"
  version: "1.0.0"
  category: "Office Applications"
  author: "WindowsMelodyRecovery"
  tags: ["visio", "office", "settings", "configurations", "templates", "stencils", "add-ins"]

prerequisites:
  - type: script
    name: "Visio System Available"
    inline_script: |
      try {
          $visioFound = $false
          $officeVersions = @("16.0", "15.0", "14.0", "12.0")
          foreach ($version in $officeVersions) {
              if ((Test-Path "HKCU:\Software\Microsoft\Office\$version\Visio") -or 
                  (Test-Path "HKLM:\SOFTWARE\Microsoft\Office\$version\Visio")) {
                  $visioFound = $true
                  break
              }
          }
          
          # Also check for Visio executable
          $visioExePaths = @(
              "${env:ProgramFiles}\Microsoft Office\root\Office16\VISIO.EXE",
              "${env:ProgramFiles(x86)}\Microsoft Office\root\Office16\VISIO.EXE",
              "${env:ProgramFiles}\Microsoft Office\Office15\VISIO.EXE",
              "${env:ProgramFiles(x86)}\Microsoft Office\Office15\VISIO.EXE",
              "${env:ProgramFiles}\Microsoft Office\Office14\VISIO.EXE",
              "${env:ProgramFiles(x86)}\Microsoft Office\Office14\VISIO.EXE"
          )
          
          foreach ($path in $visioExePaths) {
              if (Test-Path $path) {
                  $visioFound = $true
                  break
              }
          }
          
          if ($visioFound) {
              Write-Output "Microsoft Visio installation detected"
          } else {
              Write-Output "Microsoft Visio not found on this system"
          }
      } catch {
          Write-Output "Microsoft Visio not found on this system"
      }
    expected_output: "Microsoft Visio installation detected"
    on_missing: warn

registry:
  # Visio 2019/365 (Office 16.0) Settings
  - name: "Visio 2019/365 User Settings"
    path: 'HKCU:\Software\Microsoft\Office\16.0\Visio'
    type: key
    action: sync
    dynamic_state_path: "registry/visio_16_user.json"

  - name: "Visio 2019/365 System Settings"
    path: 'HKLM:\SOFTWARE\Microsoft\Office\16.0\Visio'
    type: key
    action: sync
    dynamic_state_path: "registry/visio_16_system.json"

  - name: "Visio 2019/365 Options"
    path: 'HKCU:\Software\Microsoft\Office\16.0\Visio\Options'
    type: key
    action: sync
    dynamic_state_path: "registry/visio_16_options.json"

  - name: "Visio 2019/365 Security Settings"
    path: 'HKCU:\Software\Microsoft\Office\16.0\Visio\Security'
    type: key
    action: sync
    dynamic_state_path: "registry/visio_16_security.json"

  - name: "Visio 2019/365 Add-ins"
    path: 'HKCU:\Software\Microsoft\Office\16.0\Visio\AddIns'
    type: key
    action: sync
    dynamic_state_path: "registry/visio_16_addins.json"

  - name: "Visio 2019/365 Drawing Settings"
    path: 'HKCU:\Software\Microsoft\Office\16.0\Visio\Drawing'
    type: key
    action: sync
    dynamic_state_path: "registry/visio_16_drawing.json"

  - name: "Visio 2019/365 File MRU"
    path: 'HKCU:\Software\Microsoft\Office\16.0\Visio\File MRU'
    type: key
    action: sync
    dynamic_state_path: "registry/visio_16_file_mru.json"

  # Visio 2016 (Office 15.0) Settings
  - name: "Visio 2016 User Settings"
    path: 'HKCU:\Software\Microsoft\Office\15.0\Visio'
    type: key
    action: sync
    dynamic_state_path: "registry/visio_15_user.json"

  - name: "Visio 2016 System Settings"
    path: 'HKLM:\SOFTWARE\Microsoft\Office\15.0\Visio'
    type: key
    action: sync
    dynamic_state_path: "registry/visio_15_system.json"

  - name: "Visio 2016 Options"
    path: 'HKCU:\Software\Microsoft\Office\15.0\Visio\Options'
    type: key
    action: sync
    dynamic_state_path: "registry/visio_15_options.json"

  # Visio 2013/2010 Settings
  - name: "Visio 2013 User Settings"
    path: 'HKCU:\Software\Microsoft\Office\14.0\Visio'
    type: key
    action: sync
    dynamic_state_path: "registry/visio_14_user.json"

  - name: "Visio 2010 User Settings"
    path: 'HKCU:\Software\Microsoft\Office\12.0\Visio'
    type: key
    action: sync
    dynamic_state_path: "registry/visio_12_user.json"

  # File Associations
  - name: "Visio Drawing File Association (.vsd)"
    path: 'HKCU:\Software\Classes\.vsd'
    type: key
    action: sync
    dynamic_state_path: "registry/file_assoc_vsd.json"

  - name: "Visio Drawing File Association (.vsdx)"
    path: 'HKCU:\Software\Classes\.vsdx'
    type: key
    action: sync
    dynamic_state_path: "registry/file_assoc_vsdx.json"

  - name: "Visio Stencil File Association (.vss)"
    path: 'HKCU:\Software\Classes\.vss'
    type: key
    action: sync
    dynamic_state_path: "registry/file_assoc_vss.json"

files:
  # Visio User Settings and Templates
  - name: "Visio User Settings"
    path: "%APPDATA%\\Microsoft\\Visio"
    type: directory
    action: sync
    dynamic_state_path: "files/visio_settings"

  - name: "Visio Templates"
    path: "%USERPROFILE%\\Documents\\My Shapes"
    type: directory
    action: sync
    dynamic_state_path: "files/my_shapes"

  - name: "Visio Add-ons"
    path: "%APPDATA%\\Microsoft\\AddIns"
    type: directory
    action: sync
    dynamic_state_path: "files/addins"

applications:
  # Visio Installation Information
  - name: "Visio Installation Information"
    discovery_command: |
      try {
          $visioVersions = @()
          $officeVersions = @("16.0", "15.0", "14.0", "12.0")
          
          foreach ($version in $officeVersions) {
              $versionKey = "HKLM:\SOFTWARE\Microsoft\Office\$version\Visio\InstallRoot"
              if (Test-Path $versionKey) {
                  $installPath = Get-ItemProperty -Path $versionKey -Name "Path" -ErrorAction SilentlyContinue
                  if ($installPath) {
                      $visioVersions += @{
                          Version = $version
                          InstallPath = $installPath.Path
                      }
                  }
              }
          }
          
          if ($visioVersions.Count -gt 0) {
              $visioVersions | ConvertTo-Json -Depth 10
          } else {
              Write-Output "[]"
          }
      } catch {
          Write-Output "[]"
      }
    parse_script: |
      param($DiscoveryOutput)
      try {
          $versions = $DiscoveryOutput | ConvertFrom-Json
          return @{
              VisioVersionCount = $versions.Count
              InstalledVersions = $versions | ForEach-Object { 
                  switch ($_.Version) {
                      "16.0" { "Visio 2019/365" }
                      "15.0" { "Visio 2016" }
                      "14.0" { "Visio 2013" }
                      "12.0" { "Visio 2010" }
                      default { "Visio $($_.Version)" }
                  }
              }
              InstallPaths = $versions | ForEach-Object { $_.InstallPath }
          }
      } catch {
          Write-Verbose "Error parsing Visio installation information: $_"
          return @{
              VisioVersionCount = 0
              InstalledVersions = @()
              InstallPaths = @()
          }
      }
    dynamic_state_path: "applications/installation.json"

  # Visio Add-ins
  - name: "Visio Add-ins"
    discovery_command: |
      try {
          $addIns = @()
          $officeVersions = @("16.0", "15.0", "14.0", "12.0")
          
          foreach ($version in $officeVersions) {
              $addInsKey = "HKCU:\Software\Microsoft\Office\$version\Visio\AddIns"
              if (Test-Path $addInsKey) {
                  $addInNames = Get-ChildItem -Path $addInsKey -ErrorAction SilentlyContinue | ForEach-Object { $_.PSChildName }
                  foreach ($name in $addInNames) {
                      $addIns += @{
                          Version = $version
                          Name = $name
                      }
                  }
              }
          }
          
          if ($addIns.Count -gt 0) {
              $addIns | ConvertTo-Json -Depth 10
          } else {
              Write-Output "[]"
          }
      } catch {
          Write-Output "[]"
      }
    parse_script: |
      param($DiscoveryOutput)
      try {
          $addIns = $DiscoveryOutput | ConvertFrom-Json
          return @{
              VisioAddInCount = $addIns.Count
              AddInsByVersion = $addIns | Group-Object Version | ForEach-Object { "$($_.Name): $($_.Count)" }
              AddInNames = $addIns | ForEach-Object { $_.Name }
          }
      } catch {
          Write-Verbose "Error parsing Visio add-ins: $_"
          return @{
              VisioAddInCount = 0
              AddInsByVersion = @()
              AddInNames = @()
          }
      }
    dynamic_state_path: "applications/addins.json"

  # Visio File Associations
  - name: "Visio File Associations"
    discovery_command: |
      try {
          $associations = @()
          $visioExtensions = @(".vsd", ".vsdx", ".vss", ".vssx", ".vst", ".vstx")
          
          foreach ($ext in $visioExtensions) {
              $extKey = "HKCU:\Software\Classes\$ext"
              if (Test-Path $extKey) {
                  $assoc = Get-ItemProperty -Path $extKey -Name "(default)" -ErrorAction SilentlyContinue
                  if ($assoc) {
                      $associations += @{
                          Extension = $ext
                          Handler = $assoc."(default)"
                      }
                  }
              }
          }
          
          if ($associations.Count -gt 0) {
              $associations | ConvertTo-Json -Depth 10
          } else {
              Write-Output "[]"
          }
      } catch {
          Write-Output "[]"
      }
    parse_script: |
      param($DiscoveryOutput)
      try {
          $associations = $DiscoveryOutput | ConvertFrom-Json
          return @{
              FileAssociationCount = $associations.Count
              SupportedExtensions = $associations | ForEach-Object { $_.Extension }
              AssociationHandlers = $associations | ForEach-Object { "$($_.Extension): $($_.Handler)" }
          }
      } catch {
          Write-Verbose "Error parsing Visio file associations: $_"
          return @{
              FileAssociationCount = 0
              SupportedExtensions = @()
              AssociationHandlers = @()
          }
      }
    dynamic_state_path: "applications/file_associations.json"

cleanup:
  - name: "Visio Settings Notification"
    type: script
    inline_script: |
      Write-Host "Microsoft Visio settings have been restored." -ForegroundColor Green
      Write-Host "You may need to restart Visio for all changes to take effect." -ForegroundColor Yellow
      Write-Host "Custom templates and shapes are available in their respective folders." -ForegroundColor Green