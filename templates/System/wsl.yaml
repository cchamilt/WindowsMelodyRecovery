metadata:
  name: "WSL Environment"
  description: "Backup and restore Windows Subsystem for Linux environment including packages, configuration files, dotfiles, and chezmoi setup"
  author: "Windows Melody Recovery"
  version: "1.0.0"
  category: "System Configuration"
  tags: ["wsl", "linux", "subsystem", "packages", "dotfiles", "chezmoi", "configuration"]

prerequisites:
  - type: script
    name: "WSL Available"
    inline_script: |
      try {
          if (Get-Command wsl -ErrorAction SilentlyContinue) {
              $wslDistros = wsl --list --quiet 2>$null
              if ($wslDistros -and $wslDistros.Count -gt 0) {
                  Write-Output "WSL system available with distributions"
              } else {
                  Write-Output "WSL system available but no distributions"
              }
          } else {
              Write-Output "WSL system not available"
          }
      } catch {
          Write-Output "WSL system not available"
      }
    expected_output: "WSL system available"
    on_missing: warn

registry:
  # WSL Configuration Registry Keys
  - name: "WSL System Settings"
    path: 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Lxss'
    type: key
    action: sync
    dynamic_state_path: "registry/lxss_system.json"

  - name: "WSL Service Settings"
    path: 'HKLM:\SYSTEM\CurrentControlSet\Services\LxssManager'
    type: key
    action: sync
    dynamic_state_path: "registry/lxss_manager.json"

  - name: "WSL User Settings"
    path: 'HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Lxss'
    type: key
    action: sync
    dynamic_state_path: "registry/lxss_user.json"

files:
  # Windows-side WSL configuration files
  - name: "WSL Configuration File"
    path: "C:/Users/$env:USERNAME/.wslconfig"
    type: file
    action: sync
    dynamic_state_path: "files/wslconfig.json"

  - name: "WSL Global Configuration"
    path: "C:/ProgramData/Microsoft/WSL/wsl.conf"
    type: file
    action: sync
    dynamic_state_path: "files/wsl_global_conf.json"

applications:
  # WSL Distribution Information
  - name: "WSL Distribution Info"
    dynamic_state_path: "wsl_distributions.json"
    discovery_command: |
      try {
          if (!(Get-Command wsl -ErrorAction SilentlyContinue)) {
              return @()
          }
          
          $distributions = @()
          $wslList = wsl --list --verbose 2>$null
          
          if ($wslList) {
              foreach ($line in $wslList) {
                  if ($line -match '^\s*(\*?)\s*(.+?)\s+(Running|Stopped)\s+(\d+)') {
                      $isDefault = $matches[1] -eq '*'
                      $name = $matches[2].Trim()
                      $state = $matches[3]
                      $version = $matches[4]
                      
                      if ($name -ne "NAME" -and $name -ne "Windows Subsystem for Linux Distributions:") {
                          $distributions += @{
                              Name = $name
                              State = $state
                              Version = "WSL$version"
                              IsDefault = $isDefault
                          }
                      }
                  }
              }
          }
          
          return $distributions
      } catch {
          return @()
      }
    parse_script: |
      param($DiscoveryOutput)
      $applications = @()
      
      foreach ($distro in $DiscoveryOutput) {
          $applications += @{
              Name = "WSL-$($distro.Name)"
              Version = $distro.Version
              Status = $distro.State
              IsDefault = $distro.IsDefault
              DistributionName = $distro.Name
          }
      }
      
      return $applications
    install_script: |
      param($StateObject)
      if ($StateObject.Count -gt 0) {
          Write-Host "WSL Distribution information restored:" -ForegroundColor Green
          foreach ($distro in $StateObject) {
              $defaultText = if ($distro.IsDefault) { " (Default)" } else { "" }
              Write-Host "  - $($distro.DistributionName): $($distro.Status)$defaultText" -ForegroundColor Cyan
              Write-Host "    Version: $($distro.Version)" -ForegroundColor Gray
          }
      } else {
          Write-Host "No WSL distributions found in backup" -ForegroundColor Yellow
      }

  # WSL Package Management - All Packages
  - name: "WSL Packages"
    dynamic_state_path: "packages/all_packages.json"
    discovery_command: |
      try {
          if (!(Get-Command wsl -ErrorAction SilentlyContinue)) {
              return @()
          }
          
          $packages = @()
          $packageManagers = @{
              "apt" = "dpkg --get-selections | grep -v deinstall | awk '{print \$1}'"
              "yum" = "yum list installed | awk 'NR>1 {print \$1}'"
              "dnf" = "dnf list installed | awk 'NR>1 {print \$1}'"
              "pacman" = "pacman -Q | awk '{print \$1}'"
              "zypper" = "zypper search --installed-only | awk 'NR>4 {print \$3}'"
              "apk" = "apk list --installed | cut -d' ' -f1"
          }
          
          foreach ($pm in $packageManagers.Keys) {
              $checkCmd = "which $pm >/dev/null 2>&1 && echo 'available' || echo 'unavailable'"
              $available = wsl --exec bash -c $checkCmd 2>$null
              
              if ($available -eq "available") {
                  $packageList = wsl --exec bash -c $packageManagers[$pm] 2>$null
                  if ($packageList) {
                      foreach ($package in $packageList) {
                          if ($package -and $package.Trim() -ne "") {
                              $packages += @{
                                  Name = $package.Trim()
                                  Manager = $pm
                              }
                          }
                      }
                  }
              }
          }
          
          return $packages
      } catch {
          return @()
      }
    parse_script: |
      param($DiscoveryOutput)
      $applications = @()
      $managerCounts = @{}
      
      foreach ($package in $DiscoveryOutput) {
          if (-not $managerCounts.ContainsKey($package.Manager)) {
              $managerCounts[$package.Manager] = 0
          }
          $managerCounts[$package.Manager]++
      }
      
      foreach ($manager in $managerCounts.Keys) {
          $applications += @{
              Name = "PackageManager-$manager"
              Version = "System Package Manager"
              Status = "Active"
              PackageManager = $manager
              PackageCount = $managerCounts[$manager]
          }
      }
      
      return $applications
    install_script: |
      param($StateObject)
      if ($StateObject.Count -gt 0) {
          Write-Host "WSL Package information restored:" -ForegroundColor Green
          foreach ($pm in $StateObject) {
              Write-Host "  - $($pm.PackageManager): $($pm.PackageCount) packages" -ForegroundColor Cyan
          }
          Write-Host "Note: Actual package installation requires manual setup" -ForegroundColor Yellow
      } else {
          Write-Host "No WSL packages found in backup" -ForegroundColor Yellow
      }

  # WSL Configuration Files Status  
  - name: "WSL Configuration Files"
    dynamic_state_path: "config_files.json"
    discovery_command: |
      try {
          if (!(Get-Command wsl -ErrorAction SilentlyContinue)) {
              return @()
          }
          
          $configPaths = @(
              "/etc/wsl.conf", "/etc/fstab", "/etc/hosts", "/etc/environment", 
              "~/.bashrc", "~/.bash_profile", "~/.bash_aliases", "~/.profile",
              "~/.zshrc", "~/.gitconfig", "~/.vimrc", "~/.tmux.conf",
              "~/.ssh/config", "~/.aws/config"
          )
          
          $configs = @()
          foreach ($path in $configPaths) {
              $result = wsl --exec bash -c "if [ -e '$path' ]; then echo 'EXISTS:$path'; fi" 2>$null
              if ($result -and $result.StartsWith("EXISTS:")) {
                  $actualPath = $result.Substring(7)
                  $configs += @{
                      Path = $actualPath
                      Exists = $true
                  }
              }
          }
          
          return $configs
      } catch {
          return @()
      }
    parse_script: |
      param($DiscoveryOutput)
      $applications = @()
      foreach ($config in $DiscoveryOutput) {
          $applications += @{
              Name = "Config-$(Split-Path $config.Path -Leaf)"
              Version = "1.0"
              Status = if ($config.Exists) { "Present" } else { "Missing" }
              Path = $config.Path
          }
      }
      return $applications
    install_script: |
      param($StateObject)
      if ($StateObject.Count -gt 0) {
          Write-Host "WSL configuration file information restored:" -ForegroundColor Green
          foreach ($config in $StateObject) {
              Write-Host "  - $($config.Path): $($config.Status)" -ForegroundColor Cyan
          }
      } else {
          Write-Host "No WSL configuration files found in backup" -ForegroundColor Yellow
      }

  # chezmoi Status
  - name: "chezmoi Configuration"
    dynamic_state_path: "chezmoi_status.json"
    discovery_command: |
      try {
          if (!(Get-Command wsl -ErrorAction SilentlyContinue)) {
              return @{
                  chezmoiAvailable = $false
                  chezmoiInitialized = $false
                  managedFiles = @()
                  sourceDirectory = ""
                  version = ""
              }
          }
          
          $chezmoiAvailable = wsl --exec bash -c "if command -v chezmoi >/dev/null 2>&1; then echo 'true'; else echo 'false'; fi" 2>$null
          
          if ($chezmoiAvailable -eq "true") {
              $version = wsl --exec bash -c "chezmoi --version 2>/dev/null | head -1 || echo 'unknown'" 2>$null
              $initialized = wsl --exec bash -c "if [ -d \`$HOME/.local/share/chezmoi\` ]; then echo 'true'; else echo 'false'; fi" 2>$null
              
              $chezmoiData = @{
                  chezmoiAvailable = $true
                  chezmoiInitialized = ($initialized -eq "true")
                  version = $version
                  managedFiles = @()
                  sourceDirectory = ""
              }
              
              if ($initialized -eq "true") {
                  $sourceDir = wsl --exec bash -c "chezmoi source-path 2>/dev/null || echo '\$HOME/.local/share/chezmoi'" 2>$null
                  $chezmoiData.sourceDirectory = $sourceDir
                  
                  $managedCount = wsl --exec bash -c "chezmoi managed 2>/dev/null | wc -l || echo '0'" 2>$null
                  $chezmoiData.managedFileCount = [int]$managedCount
              }
              
              return $chezmoiData
          } else {
              return @{
                  chezmoiAvailable = $false
                  chezmoiInitialized = $false
                  managedFiles = @()
                  sourceDirectory = ""
                  version = ""
              }
          }
      } catch {
          return @{
              chezmoiAvailable = $false
              chezmoiInitialized = $false
              managedFiles = @()
              sourceDirectory = ""
              version = ""
          }
      }
    parse_script: |
      param($DiscoveryOutput)
      $applications = @()
      $applications += @{
          Name = "chezmoi"
          Version = $DiscoveryOutput.version
          Status = if ($DiscoveryOutput.chezmoiAvailable) { 
              if ($DiscoveryOutput.chezmoiInitialized) { "Initialized" } else { "Available" }
          } else { "Not Available" }
          ManagedFileCount = if ($DiscoveryOutput.managedFileCount) { $DiscoveryOutput.managedFileCount } else { 0 }
          SourceDirectory = $DiscoveryOutput.sourceDirectory
      }
      return $applications
    install_script: |
      param($StateObject)
      if ($StateObject.Count -gt 0) {
          $chezmoi = $StateObject[0]
          if ($chezmoi.Status -eq "Initialized") {
              Write-Host "chezmoi was previously configured with $($chezmoi.ManagedFileCount) managed files" -ForegroundColor Green
              if ($chezmoi.SourceDirectory) {
                  Write-Host "  Source directory: $($chezmoi.SourceDirectory)" -ForegroundColor Cyan
              }
          } else {
              Write-Host "chezmoi was not configured in the backed up environment" -ForegroundColor Yellow
          }
      } else {
          Write-Host "No chezmoi configuration found in backup" -ForegroundColor Yellow
      }