metadata:
  name: "Start Menu Settings"
  description: "Backup and restore Windows Start Menu layout, taskbar settings, and search configuration"
  author: "Windows Melody Recovery"
  version: "1.0.0"

prerequisites:
  - type: script
    name: "Start Menu System Available"
    inline_script: |
      try {
          Get-Process -Name "explorer" -ErrorAction Stop | Out-Null
          Write-Output "Start Menu system available"
      } catch {
          Write-Output "Start Menu system not available"
      }
    expected_output: "Start Menu system available"
    on_missing: warn

registry:
  # Start Menu layout and customization
  - name: "Explorer Advanced Settings"
    path: "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced"
    type: key
    action: sync
    dynamic_state_path: "registry/explorer_advanced.json"

  - name: "System Explorer Advanced Settings"
    path: "HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced"
    type: key
    action: sync
    dynamic_state_path: "registry/system_explorer_advanced.json"

  - name: "Start Menu User Preferences"
    path: "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Start"
    type: key
    action: sync
    dynamic_state_path: "registry/start_user_preferences.json"

  - name: "Start Menu System Configuration"
    path: "HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\StartPage"
    type: key
    action: sync
    dynamic_state_path: "registry/start_system_config.json"

  # Taskbar settings
  - name: "Taskbar Button Arrangements"
    path: "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Taskband"
    type: key
    action: sync
    dynamic_state_path: "registry/taskband.json"

  - name: "Taskbar Items Cache"
    path: "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\TaskbarItemsCache"
    type: key
    action: sync
    dynamic_state_path: "registry/taskbar_items_cache.json"

  - name: "Taskbar Position Settings"
    path: "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\StuckRects3"
    type: key
    action: sync
    dynamic_state_path: "registry/stuck_rects.json"

  - name: "Desktop Stream Settings"
    path: "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Streams\\Desktop"
    type: key
    action: sync
    dynamic_state_path: "registry/streams_desktop.json"

  # Jump Lists and recent items
  - name: "Jump Lists Configuration"
    path: "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\JumpLists"
    type: key
    action: sync
    dynamic_state_path: "registry/jump_lists.json"

  - name: "Recent Documents Tracking"
    path: "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\RecentDocs"
    type: key
    action: sync
    dynamic_state_path: "registry/recent_docs.json"

  # Search settings
  - name: "Windows Search User Preferences"
    path: "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Search"
    type: key
    action: sync
    dynamic_state_path: "registry/search_user.json"

  - name: "Windows Search System Configuration"
    path: "HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Search"
    type: key
    action: sync
    dynamic_state_path: "registry/search_system.json"

  # Start Menu cloud store and sync
  - name: "Start Menu Cloud Store"
    path: "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\CloudStore\\Store\\Cache\\DefaultAccount"
    type: key
    action: sync
    dynamic_state_path: "registry/cloud_store.json"

  # Start Menu experience and layout
  - name: "Start Layout User Preferences"
    path: "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\StartLayout"
    type: key
    action: sync
    dynamic_state_path: "registry/start_layout_user.json"

  - name: "Start Layout System Policies"
    path: "HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\StartLayout"
    type: key
    action: sync
    dynamic_state_path: "registry/start_layout_system.json"

  # Windows 11 specific Start Menu settings
  - name: "Windows 11 Start Menu Configuration"
    path: "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\StartMenu"
    type: key
    action: sync
    dynamic_state_path: "registry/start_menu_config.json"

  - name: "Start Menu Folders"
    path: "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Start\\Folders"
    type: key
    action: sync
    dynamic_state_path: "registry/start_folders.json"

files:
  # User Start Menu directory
  - name: "User Start Menu Programs"
    path: "$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs"
    type: directory
    action: sync
    dynamic_state_path: "files/user_start_menu"

  - name: "User Startup Programs"
    path: "$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Startup"
    type: directory
    action: sync
    dynamic_state_path: "files/user_startup"

  # All Users Start Menu directory
  - name: "System Start Menu Programs"
    path: "$env:ProgramData\\Microsoft\\Windows\\Start Menu\\Programs"
    type: directory
    action: backup
    dynamic_state_path: "files/system_start_menu"

  - name: "System Startup Programs"
    path: "$env:ProgramData\\Microsoft\\Windows\\Start Menu\\Startup"
    type: directory
    action: sync
    dynamic_state_path: "files/system_startup"

  # Taskbar layout files
  - name: "Shell Layout Configuration"
    path: "$env:LOCALAPPDATA\\Microsoft\\Windows\\Shell"
    type: directory
    action: sync
    dynamic_state_path: "files/shell_layout"

  # Start Menu tiles database (Windows 10)
  - name: "Tile Data Layer Database"
    path: "$env:LOCALAPPDATA\\TileDataLayer\\Database"
    type: directory
    action: backup
    dynamic_state_path: "files/tile_database"

applications:
  # Taskbar pinned applications
  - name: "Taskbar Pinned Applications"
    type: custom
    discovery_command: |
      try {
          $taskband = Get-ItemProperty "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Taskband" -ErrorAction SilentlyContinue
          if ($taskband) {
              $taskband | Select-Object -Property *
          } else {
              @{}
          }
      } catch {
          Write-Warning "Could not retrieve taskbar pinned applications: $_"
          @{}
      }
    parse_script: |
      param([object]$TaskbandData)
      try {
          $result = $TaskbandData | ConvertTo-Json -Depth 5
          return $result
      } catch {
          Write-Warning "Failed to parse taskbar data: $_"
          return "{}"
      }
    dynamic_state_path: "applications/taskbar_pinned.json"

  # Recent applications in Start Menu
  - name: "Recent Applications"
    type: custom
    discovery_command: |
      try {
          $searchSettings = Get-ItemProperty "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Search" -ErrorAction SilentlyContinue
          if ($searchSettings) {
              $searchSettings | Select-Object -Property *
          } else {
              @{}
          }
      } catch {
          Write-Warning "Could not retrieve recent applications: $_"
          @{}
      }
    parse_script: |
      param([object]$SearchData)
      try {
          $result = $SearchData | ConvertTo-Json -Depth 5
          return $result
      } catch {
          Write-Warning "Failed to parse search data: $_"
          return "{}"
      }
    dynamic_state_path: "applications/recent_apps.json"

  # Jump list applications
  - name: "Jump List Applications"
    type: custom
    discovery_command: |
      try {
          $jumpLists = Get-ChildItem "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\JumpLists" -ErrorAction SilentlyContinue
          if ($jumpLists) {
              $jumpLists | ForEach-Object { 
                  Get-ItemProperty $_.PSPath -ErrorAction SilentlyContinue 
              } | Where-Object { $_ -ne $null }
          } else {
              @()
          }
      } catch {
          Write-Warning "Could not retrieve jump list applications: $_"
          @()
      }
    parse_script: |
      param([object]$JumpListData)
      try {
          $result = $JumpListData | ConvertTo-Json -Depth 5
          return $result
      } catch {
          Write-Warning "Failed to parse jump list data: $_"
          return "[]"
      }
    dynamic_state_path: "applications/jump_lists.json"

  # Windows Search service configuration
  - name: "Search Service Configuration"
    type: custom
    discovery_command: |
      try {
          $searchService = Get-WmiObject -Class Win32_Service -Filter "Name='WSearch'" -ErrorAction SilentlyContinue
          if ($searchService) {
              $searchService | Select-Object Name, State, StartMode, Description
          } else {
              @{}
          }
      } catch {
          Write-Warning "Could not retrieve search service configuration: $_"
          @{}
      }
    parse_script: |
      param([object]$ServiceData)
      try {
          $result = $ServiceData | ConvertTo-Json -Depth 3
          return $result
      } catch {
          Write-Warning "Failed to parse service data: $_"
          return "{}"
      }
    dynamic_state_path: "applications/search_service.json"

cleanup:
  - name: "Verify Explorer Process"
    type: check
    command: "Get-Process -Name 'explorer' | Where-Object { $_.ProcessName -eq 'explorer' }"
    expected_result: "explorer"
    on_failure: warn 