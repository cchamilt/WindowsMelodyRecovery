metadata:
  name: "PowerShell Settings"
  description: "Backup and restore PowerShell configuration including profiles, modules, execution policies, and settings for both Windows PowerShell 5.1 and PowerShell 7+"
  author: "Windows Melody Recovery"
  version: "1.0.0"

prerequisites:
  - type: script
    name: "PowerShell System Available"
    inline_script: |
      try {
          Get-Command Get-ExecutionPolicy -ErrorAction Stop | Out-Null
          Write-Output "PowerShell system available"
      } catch {
          Write-Output "PowerShell system not available"
      }
    expected_output: "PowerShell system available"
    on_missing: warn

registry:
  # PowerShell execution policies
  - name: "PowerShell 1.0 Execution Policy"
    path: 'HKLM:\SOFTWARE\Microsoft\PowerShell\1\ShellIds\Microsoft.PowerShell'
    type: key
    action: sync
    dynamic_state_path: "registry/powershell_1_execution.json"

  - name: "PowerShell 3.0+ Execution Policy"
    path: 'HKLM:\SOFTWARE\Microsoft\PowerShell\3\ShellIds\Microsoft.PowerShell'
    type: key
    action: sync
    dynamic_state_path: "registry/powershell_3_execution.json"

  - name: "PowerShell 32-bit Execution Policy"
    path: 'HKLM:\SOFTWARE\Wow6432Node\Microsoft\PowerShell\1\ShellIds\Microsoft.PowerShell'
    type: key
    action: sync
    dynamic_state_path: "registry/powershell_32bit_execution.json"
  
  # PowerShell logging policies
  - name: "PowerShell Module Logging"
    path: 'HKLM:\SOFTWARE\Policies\Microsoft\Windows\PowerShell\ModuleLogging'
    type: key
    action: sync
    dynamic_state_path: "registry/module_logging.json"

  - name: "PowerShell Script Block Logging"
    path: 'HKLM:\SOFTWARE\Policies\Microsoft\Windows\PowerShell\ScriptBlockLogging'
    type: key
    action: sync
    dynamic_state_path: "registry/script_block_logging.json"

  - name: "PowerShell Transcription Logging"
    path: 'HKLM:\SOFTWARE\Policies\Microsoft\Windows\PowerShell\Transcription'
    type: key
    action: sync
    dynamic_state_path: "registry/transcription_logging.json"
  
  # Console and user settings
  - name: "Console Settings"
    path: 'HKCU:\Console'
    type: key
    action: sync
    dynamic_state_path: "registry/console_settings.json"

  - name: "User PowerShell Settings"
    path: 'HKCU:\Software\Microsoft\PowerShell'
    type: key
    action: sync
    dynamic_state_path: "registry/user_powershell.json"
  
  # System PowerShell configuration
  - name: "System PowerShell Configuration"
    path: 'HKLM:\SOFTWARE\Microsoft\PowerShell'
    type: key
    action: sync
    dynamic_state_path: "registry/system_powershell.json"

  - name: "PowerShell Core System Configuration"
    path: 'HKLM:\SOFTWARE\Microsoft\PowerShellCore'
    type: key
    action: sync
    dynamic_state_path: "registry/powershell_core_system.json"

  - name: "PowerShell Core User Configuration"
    path: 'HKCU:\Software\Microsoft\PowerShellCore'
    type: key
    action: sync
    dynamic_state_path: "registry/powershell_core_user.json"
  
  # PowerShell ISE settings
  - name: "PowerShell ISE Settings"
    path: 'HKCU:\Software\Microsoft\PowerShell\3\ISE'
    type: key
    action: sync
    dynamic_state_path: "registry/powershell_ise.json"

files:
  # Windows PowerShell user profile directory
  - name: "Windows PowerShell User Profiles"
    path: "%USERPROFILE%\\Documents\\WindowsPowerShell"
    type: directory
    action: sync
    dynamic_state_path: "files/windows_powershell_user"

  # PowerShell 7+ user profile directory
  - name: "PowerShell 7+ User Profiles"
    path: "%USERPROFILE%\\Documents\\PowerShell"
    type: directory
    action: sync
    dynamic_state_path: "files/powershell_7_user"

  # PSReadLine settings and history
  - name: "PSReadLine Configuration"
    path: "%APPDATA%\\Microsoft\\Windows\\PowerShell\\PSReadLine"
    type: directory
    action: sync
    dynamic_state_path: "files/psreadline"

  # PowerShell help files (Windows PowerShell)
  - name: "Windows PowerShell Help Files"
    path: "%USERPROFILE%\\Documents\\WindowsPowerShell\\Help"
    type: directory
    action: sync
    dynamic_state_path: "files/windows_powershell_help"

  # PowerShell 7+ help files
  - name: "PowerShell 7+ Help Files"
    path: "%USERPROFILE%\\Documents\\PowerShell\\Help"
    type: directory
    action: sync
    dynamic_state_path: "files/powershell_7_help"

applications:
  # PowerShell version information
  - name: "PowerShell Version Information"
    type: custom
    discovery_command: |
      try {
          $PSVersionTable | ConvertTo-Json -Depth 5
      } catch {
          Write-Warning "Could not retrieve PowerShell version information: $_"
          "{}"
      }
    parse_script: |
      param([string]$DiscoveryOutput)
      try {
          $versionData = $DiscoveryOutput | ConvertFrom-Json
          $applications = @()
          
          if ($versionData) {
              $applications += @{
                  Name = "PowerShellVersion"
                  Version = if ($versionData.PSVersion) { $versionData.PSVersion.ToString() } else { "Unknown" }
                  Status = "Installed"
                  PSVersion = $versionData.PSVersion
                  PSEdition = $versionData.PSEdition
                  GitCommitId = $versionData.GitCommitId
                  OS = $versionData.OS
                  Platform = $versionData.Platform
                  WSManStackVersion = $versionData.WSManStackVersion
                  SerializationVersion = $versionData.SerializationVersion
                  CLRVersion = $versionData.CLRVersion
              }
          }
          
          if ($applications.Count -eq 0) {
              "[]"
          } else {
              $applications | ConvertTo-Json -Depth 5 -Compress
          }
      } catch {
          Write-Warning "Failed to parse PowerShell version information: $_"
          "[]"
      }
    dynamic_state_path: "powershell_version.yaml"
    install_script: |
      param([string]$StateJson)
      $versions = $StateJson | ConvertFrom-Json
      if ($versions.Count -gt 0) {
          Write-Host "PowerShell version information restored:" -ForegroundColor Green
          foreach ($version in $versions) {
              Write-Host "  - PowerShell $($version.PSEdition) $($version.Version)" -ForegroundColor Cyan
              Write-Host "    Platform: $($version.Platform)" -ForegroundColor Gray
              if ($version.GitCommitId) {
                  Write-Host "    Git Commit: $($version.GitCommitId)" -ForegroundColor Gray
              }
          }
      } else {
          Write-Host "No PowerShell version information found in backup" -ForegroundColor Yellow
      }

  # Installed PowerShell modules
  - name: "Installed PowerShell Modules"
    type: custom
    discovery_command: |
      try {
          Get-Module -ListAvailable | Select-Object Name, Version, Path, ModuleType, Description | ConvertTo-Json -Depth 5
      } catch {
          Write-Warning "Could not retrieve PowerShell modules: $_"
          "[]"
      }
    parse_script: |
      param([string]$DiscoveryOutput)
      try {
          $moduleData = $DiscoveryOutput | ConvertFrom-Json
          $applications = @()
          
          if ($moduleData -and $moduleData.Count -gt 0) {
              foreach ($module in $moduleData) {
                  $applications += @{
                      Name = "PSModule-$($module.Name)"
                      Version = $module.Version.ToString()
                      Status = "Available"
                      ModuleName = $module.Name
                      ModuleType = $module.ModuleType
                      ModulePath = $module.Path
                      Description = $module.Description
                      IsUserModule = $module.Path -like "*Documents*"
                      IsSystemModule = $module.Path -like "*Program Files*"
                  }
              }
          }
          
          if ($applications.Count -eq 0) {
              "[]"
          } else {
              $applications | ConvertTo-Json -Depth 5 -Compress
          }
      } catch {
          Write-Warning "Failed to parse PowerShell modules: $_"
          "[]"
      }
    dynamic_state_path: "powershell_modules.yaml"
    install_script: |
      param([string]$StateJson)
      $modules = $StateJson | ConvertFrom-Json
      if ($modules.Count -gt 0) {
          Write-Host "PowerShell modules information restored:" -ForegroundColor Green
          $userModules = $modules | Where-Object { $_.IsUserModule }
          $systemModules = $modules | Where-Object { $_.IsSystemModule }
          
          if ($userModules.Count -gt 0) {
              Write-Host "  User Modules ($($userModules.Count)):" -ForegroundColor Cyan
              foreach ($module in $userModules | Select-Object -First 10) {
                  Write-Host "    - $($module.ModuleName) $($module.Version)" -ForegroundColor Gray
              }
              if ($userModules.Count -gt 10) {
                  Write-Host "    ... and $($userModules.Count - 10) more" -ForegroundColor Gray
              }
          }
          
          if ($systemModules.Count -gt 0) {
              Write-Host "  System Modules ($($systemModules.Count)):" -ForegroundColor Cyan
              foreach ($module in $systemModules | Select-Object -First 5) {
                  Write-Host "    - $($module.ModuleName) $($module.Version)" -ForegroundColor Gray
              }
              if ($systemModules.Count -gt 5) {
                  Write-Host "    ... and $($systemModules.Count - 5) more" -ForegroundColor Gray
              }
          }
      } else {
          Write-Host "No PowerShell modules information found in backup" -ForegroundColor Yellow
      }

  # PowerShell execution policy
  - name: "PowerShell Execution Policies"
    type: custom
    discovery_command: |
      try {
          Get-ExecutionPolicy -List | ConvertTo-Json -Depth 5
      } catch {
          Write-Warning "Could not retrieve execution policies: $_"
          "[]"
      }
    parse_script: |
      param([string]$DiscoveryOutput)
      try {
          $policyData = $DiscoveryOutput | ConvertFrom-Json
          $applications = @()
          
          if ($policyData -and $policyData.Count -gt 0) {
              foreach ($policy in $policyData) {
                  $applications += @{
                      Name = "ExecutionPolicy-$($policy.Scope)"
                      Version = "Policy"
                      Status = $policy.ExecutionPolicy
                      Scope = $policy.Scope
                      ExecutionPolicy = $policy.ExecutionPolicy
                  }
              }
          }
          
          if ($applications.Count -eq 0) {
              "[]"
          } else {
              $applications | ConvertTo-Json -Depth 5 -Compress
          }
      } catch {
          Write-Warning "Failed to parse execution policies: $_"
          "[]"
      }
    dynamic_state_path: "execution_policies.yaml"
    install_script: |
      param([string]$StateJson)
      $policies = $StateJson | ConvertFrom-Json
      if ($policies.Count -gt 0) {
          Write-Host "PowerShell execution policies restored:" -ForegroundColor Green
          foreach ($policy in $policies) {
              Write-Host "  - $($policy.Scope): $($policy.ExecutionPolicy)" -ForegroundColor Cyan
          }
          Write-Host ""
          Write-Host "NOTE: Execution policies may need to be manually restored using:" -ForegroundColor Yellow
          Write-Host "Set-ExecutionPolicy -ExecutionPolicy <Policy> -Scope <Scope>" -ForegroundColor Gray
      } else {
          Write-Host "No execution policy information found in backup" -ForegroundColor Yellow
      }

  # PowerShell providers
  - name: "PowerShell Providers"
    type: custom
    discovery_command: |
      try {
          Get-PSProvider | Select-Object Name, Drives, Description, Capabilities | ConvertTo-Json -Depth 5
      } catch {
          Write-Warning "Could not retrieve PowerShell providers: $_"
          "[]"
      }
    parse_script: |
      param([string]$DiscoveryOutput)
      try {
          $providerData = $DiscoveryOutput | ConvertFrom-Json
          $applications = @()
          
          if ($providerData -and $providerData.Count -gt 0) {
              foreach ($provider in $providerData) {
                  $applications += @{
                      Name = "PSProvider-$($provider.Name)"
                      Version = "Provider"
                      Status = "Available"
                      ProviderName = $provider.Name
                      Drives = $provider.Drives
                      Description = $provider.Description
                      Capabilities = $provider.Capabilities
                  }
              }
          }
          
          if ($applications.Count -eq 0) {
              "[]"
          } else {
              $applications | ConvertTo-Json -Depth 5 -Compress
          }
      } catch {
          Write-Warning "Failed to parse PowerShell providers: $_"
          "[]"
      }
    dynamic_state_path: "powershell_providers.yaml"
    install_script: |
      param([string]$StateJson)
      $providers = $StateJson | ConvertFrom-Json
      if ($providers.Count -gt 0) {
          Write-Host "PowerShell providers information restored:" -ForegroundColor Green
          foreach ($provider in $providers) {
              Write-Host "  - $($provider.ProviderName): $($provider.Description)" -ForegroundColor Cyan
              if ($provider.Drives -and $provider.Drives.Count -gt 0) {
                  Write-Host "    Drives: $($provider.Drives -join ', ')" -ForegroundColor Gray
              }
          }
      } else {
          Write-Host "No PowerShell providers information found in backup" -ForegroundColor Yellow
      }

  # PowerShell drives
  - name: "PowerShell Drives"
    type: custom
    discovery_command: |
      try {
          Get-PSDrive | Select-Object Name, Provider, Root, Description, Used, Free | ConvertTo-Json -Depth 5
      } catch {
          Write-Warning "Could not retrieve PowerShell drives: $_"
          "[]"
      }
    parse_script: |
      param([string]$DiscoveryOutput)
      try {
          $driveData = $DiscoveryOutput | ConvertFrom-Json
          $applications = @()
          
          if ($driveData -and $driveData.Count -gt 0) {
              # Only include non-standard drives (not basic file system drives)
              $customDrives = $driveData | Where-Object { $_.Provider -ne "Microsoft.PowerShell.Core\FileSystem" -or $_.Name.Length -gt 1 }
              
              foreach ($drive in $customDrives) {
                  $applications += @{
                      Name = "PSDrive-$($drive.Name)"
                      Version = "Drive"
                      Status = "Mapped"
                      DriveName = $drive.Name
                      Provider = $drive.Provider
                      Root = $drive.Root
                      Description = $drive.Description
                      Used = $drive.Used
                      Free = $drive.Free
                  }
              }
          }
          
          if ($applications.Count -eq 0) {
              "[]"
          } else {
              $applications | ConvertTo-Json -Depth 5 -Compress
          }
      } catch {
          Write-Warning "Failed to parse PowerShell drives: $_"
          "[]"
      }
    dynamic_state_path: "powershell_drives.yaml"
    install_script: |
      param([string]$StateJson)
      $drives = $StateJson | ConvertFrom-Json
      if ($drives.Count -gt 0) {
          Write-Host "PowerShell drives information restored:" -ForegroundColor Green
          foreach ($drive in $drives) {
              Write-Host "  - $($drive.DriveName): $($drive.Root)" -ForegroundColor Cyan
              Write-Host "    Provider: $($drive.Provider)" -ForegroundColor Gray
              if ($drive.Description) {
                  Write-Host "    Description: $($drive.Description)" -ForegroundColor Gray
              }
          }
      } else {
          Write-Host "No custom PowerShell drives found in backup" -ForegroundColor Yellow
      } 