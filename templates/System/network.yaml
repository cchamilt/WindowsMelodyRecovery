metadata:
  name: "Network Settings"
  description: "Backup and restore network configuration including adapters, wireless profiles, firewall settings, and DNS configuration"
  author: "Windows Melody Recovery"
  version: "1.0.0"

prerequisites:
  - type: script
    name: "Network System Available"
    inline_script: |
      try {
          Get-Command Get-NetAdapter -ErrorAction Stop | Out-Null
          Write-Output "Network system available"
      } catch {
          Write-Output "Network system not available"
      }
    expected_output: "Network system available"
    on_missing: warn

registry:
  # TCP/IP Configuration
  - name: "TCP/IP Parameters"
    path: "HKLM:\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters"
    type: key
    action: sync
    dynamic_state_path: "registry/tcpip_parameters.json"

  - name: "TCP/IP Interfaces"
    path: "HKLM:\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters\\Interfaces"
    type: key
    action: sync
    dynamic_state_path: "registry/tcpip_interfaces.json"

  # DHCP Configuration
  - name: "DHCP Client Parameters"
    path: "HKLM:\\SYSTEM\\CurrentControlSet\\Services\\Dhcp\\Parameters"
    type: key
    action: sync
    dynamic_state_path: "registry/dhcp_parameters.json"

  # DNS Configuration
  - name: "DNS Cache Parameters"
    path: "HKLM:\\SYSTEM\\CurrentControlSet\\Services\\Dnscache\\Parameters"
    type: key
    action: sync
    dynamic_state_path: "registry/dns_parameters.json"

  # Network Cards
  - name: "Network Cards Registry"
    path: "HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\NetworkCards"
    type: key
    action: sync
    dynamic_state_path: "registry/network_cards.json"

  # Network Control
  - name: "Network Control Settings"
    path: "HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Network"
    type: key
    action: sync
    dynamic_state_path: "registry/network_control.json"

  - name: "Network List Profiles"
    path: "HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\NetworkList"
    type: key
    action: sync
    dynamic_state_path: "registry/network_list.json"

  # Internet Settings
  - name: "User Internet Settings"
    path: "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings"
    type: key
    action: sync
    encrypt: true
    dynamic_state_path: "registry/internet_settings.json"

  # Firewall Settings
  - name: "Windows Firewall Policy"
    path: "HKLM:\\SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy"
    type: key
    action: sync
    dynamic_state_path: "registry/firewall_policy.json"

files:
  # Network Configuration Files
  - name: "Network Config Files"
    path: "$env:SystemRoot/System32/drivers/etc"
    type: directory
    action: sync
    dynamic_state_path: "files/network_config.yaml"

  # Wireless Profiles
  - name: "Wireless LAN Profiles"
    path: "$env:ProgramData/Microsoft/Wlansvc/Profiles/Interfaces"
    type: directory
    action: sync
    encrypt: true
    dynamic_state_path: "files/wireless_profiles.yaml"

  # Network Connection Phonebook
  - name: "Network Connection Phonebook"
    path: "$env:ProgramData/Microsoft/Network/Connections/Pbk"
    type: directory
    action: sync
    dynamic_state_path: "files/connection_phonebook.yaml"

applications:
  # Network Adapter Information
  - name: "Network Adapters"
    type: custom
    dynamic_state_path: "network_adapters.yaml"
    discovery_command: |
      try {
          Get-NetAdapter | Select-Object Name, InterfaceDescription, Status, MacAddress, LinkSpeed, InterfaceIndex | ConvertTo-Json -Depth 5
      } catch {
          Write-Warning "Could not retrieve network adapters: $_"
          "[]"
      }
    parse_script: |
      param([string]$DiscoveryOutput)
      try {
          $adapters = $DiscoveryOutput | ConvertFrom-Json
          $applications = @()
          
          foreach ($adapter in $adapters) {
              $applications += @{
                  Name = "NetworkAdapter-$($adapter.Name)"
                  Version = "Hardware"
                  Status = $adapter.Status
                  InterfaceDescription = $adapter.InterfaceDescription
                  MacAddress = $adapter.MacAddress
                  LinkSpeed = $adapter.LinkSpeed
                  InterfaceIndex = $adapter.InterfaceIndex
              }
          }
          
          if ($applications.Count -eq 0) {
              "[]"
          } else {
              $applications | ConvertTo-Json -Depth 5 -Compress
          }
      } catch {
          Write-Warning "Failed to parse network adapters: $_"
          "[]"
      }
    install_script: |
      param([string]$StateJson)
      $adapters = $StateJson | ConvertFrom-Json
      if ($adapters.Count -gt 0) {
          Write-Host "Network adapter information restored:" -ForegroundColor Green
          foreach ($adapter in $adapters) {
              Write-Host "  - $($adapter.Name): $($adapter.Status) ($($adapter.InterfaceDescription))" -ForegroundColor Cyan
              if ($adapter.MacAddress) {
                  Write-Host "    MAC: $($adapter.MacAddress)" -ForegroundColor Gray
              }
          }
      } else {
          Write-Host "No network adapter information found in backup" -ForegroundColor Yellow
      }

  # IP Configuration
  - name: "IP Configuration"
    type: custom
    dynamic_state_path: "ip_configuration.yaml"
    discovery_command: |
      try {
          Get-NetIPConfiguration | Select-Object InterfaceAlias, InterfaceIndex, IPv4Address, IPv6Address, DNSServer | ConvertTo-Json -Depth 5
      } catch {
          Write-Warning "Could not retrieve IP configuration: $_"
          "[]"
      }
    parse_script: |
      param([string]$DiscoveryOutput)
      try {
          $ipConfigs = $DiscoveryOutput | ConvertFrom-Json
          $applications = @()
          
          foreach ($config in $ipConfigs) {
              $applications += @{
                  Name = "IPConfig-$($config.InterfaceAlias)"
                  Version = "Configuration"
                  Status = "Active"
                  InterfaceAlias = $config.InterfaceAlias
                  InterfaceIndex = $config.InterfaceIndex
                  IPv4Address = $config.IPv4Address
                  IPv6Address = $config.IPv6Address
                  DNSServer = $config.DNSServer
              }
          }
          
          if ($applications.Count -eq 0) {
              "[]"
          } else {
              $applications | ConvertTo-Json -Depth 5 -Compress
          }
      } catch {
          Write-Warning "Failed to parse IP configuration: $_"
          "[]"
      }
    install_script: |
      param([string]$StateJson)
      $ipConfigs = $StateJson | ConvertFrom-Json
      if ($ipConfigs.Count -gt 0) {
          Write-Host "IP configuration information restored:" -ForegroundColor Green
          foreach ($config in $ipConfigs) {
              Write-Host "  - $($config.InterfaceAlias): $($config.Status)" -ForegroundColor Cyan
              if ($config.IPv4Address) {
                  Write-Host "    IPv4: $($config.IPv4Address)" -ForegroundColor Gray
              }
              if ($config.DNSServer) {
                  Write-Host "    DNS: $($config.DNSServer)" -ForegroundColor Gray
              }
          }
      } else {
          Write-Host "No IP configuration information found in backup" -ForegroundColor Yellow
      }

  # Wireless Profiles
  - name: "Wireless Profiles"
    type: custom
    encrypt: true
    dynamic_state_path: "wireless_profiles.yaml"
    discovery_command: |
      try {
          $profiles = netsh wlan show profiles | Select-String "All User Profile" | ForEach-Object { $_.ToString().Split(":")[1].Trim() }
          $profileData = @()
          
          foreach ($profile in $profiles) {
              try {
                  $profileInfo = netsh wlan show profile name="$profile" key=clear
                  $profileData += @{
                      Name = $profile
                      Info = $profileInfo -join "`n"
                  }
              } catch {
                  Write-Warning "Could not get details for wireless profile: $profile"
              }
          }
          
          $profileData | ConvertTo-Json -Depth 5
      } catch {
          Write-Warning "Could not retrieve wireless profiles: $_"
          "[]"
      }
    parse_script: |
      param([string]$DiscoveryOutput)
      try {
          $profiles = $DiscoveryOutput | ConvertFrom-Json
          $applications = @()
          
          foreach ($profile in $profiles) {
              $applications += @{
                  Name = "WirelessProfile-$($profile.Name)"
                  Version = "Profile"
                  Status = "Configured"
                  ProfileName = $profile.Name
                  ProfileInfo = $profile.Info
              }
          }
          
          if ($applications.Count -eq 0) {
              "[]"
          } else {
              $applications | ConvertTo-Json -Depth 5 -Compress
          }
      } catch {
          Write-Warning "Failed to parse wireless profiles: $_"
          "[]"
      }
    install_script: |
      param([string]$StateJson)
      $profiles = $StateJson | ConvertFrom-Json
      if ($profiles.Count -gt 0) {
          Write-Host "Wireless profile information restored:" -ForegroundColor Green
          foreach ($profile in $profiles) {
              Write-Host "  - $($profile.ProfileName): $($profile.Status)" -ForegroundColor Cyan
          }
      } else {
          Write-Host "No wireless profile information found in backup" -ForegroundColor Yellow
      }

  # Firewall Profiles
  - name: "Firewall Profiles"
    type: custom
    dynamic_state_path: "firewall_profiles.yaml"
    discovery_command: |
      try {
          Get-NetFirewallProfile | Select-Object Name, Enabled, DefaultInboundAction, DefaultOutboundAction | ConvertTo-Json -Depth 5
      } catch {
          Write-Warning "Could not retrieve firewall profiles: $_"
          "[]"
      }
    parse_script: |
      param([string]$DiscoveryOutput)
      try {
          $firewallProfiles = $DiscoveryOutput | ConvertFrom-Json
          $applications = @()
          
          foreach ($profile in $firewallProfiles) {
              $applications += @{
                  Name = "FirewallProfile-$($profile.Name)"
                  Version = "Windows Firewall"
                  Status = if ($profile.Enabled) { "Enabled" } else { "Disabled" }
                  ProfileName = $profile.Name
                  DefaultInboundAction = $profile.DefaultInboundAction
                  DefaultOutboundAction = $profile.DefaultOutboundAction
              }
          }
          
          if ($applications.Count -eq 0) {
              "[]"
          } else {
              $applications | ConvertTo-Json -Depth 5 -Compress
          }
      } catch {
          Write-Warning "Failed to parse firewall profiles: $_"
          "[]"
      }
    install_script: |
      param([string]$StateJson)
      $profiles = $StateJson | ConvertFrom-Json
      if ($profiles.Count -gt 0) {
          Write-Host "Firewall profile information restored:" -ForegroundColor Green
          foreach ($profile in $profiles) {
              Write-Host "  - $($profile.ProfileName): $($profile.Status)" -ForegroundColor Cyan
              Write-Host "    Inbound: $($profile.DefaultInboundAction), Outbound: $($profile.DefaultOutboundAction)" -ForegroundColor Gray
          }
      } else {
          Write-Host "No firewall profile information found in backup" -ForegroundColor Yellow
      }

  # Network Shares
  - name: "Network Shares"
    type: custom
    dynamic_state_path: "network_shares.yaml"
    discovery_command: |
      try {
          Get-SmbShare | Select-Object Name, Path, Description, ShareType | ConvertTo-Json -Depth 5
      } catch {
          Write-Warning "Could not retrieve network shares: $_"
          "[]"
      }
    parse_script: |
      param([string]$DiscoveryOutput)
      try {
          $shares = $DiscoveryOutput | ConvertFrom-Json
          $applications = @()
          
          foreach ($share in $shares) {
              $applications += @{
                  Name = "NetworkShare-$($share.Name)"
                  Version = "SMB Share"
                  Status = "Active"
                  ShareName = $share.Name
                  SharePath = $share.Path
                  Description = $share.Description
                  ShareType = $share.ShareType
              }
          }
          
          if ($applications.Count -eq 0) {
              "[]"
          } else {
              $applications | ConvertTo-Json -Depth 5 -Compress
          }
      } catch {
          Write-Warning "Failed to parse network shares: $_"
          "[]"
      }
    install_script: |
      param([string]$StateJson)
      $shares = $StateJson | ConvertFrom-Json
      if ($shares.Count -gt 0) {
          Write-Host "Network share information restored:" -ForegroundColor Green
          foreach ($share in $shares) {
              Write-Host "  - $($share.ShareName): $($share.SharePath)" -ForegroundColor Cyan
              if ($share.Description) {
                  Write-Host "    Description: $($share.Description)" -ForegroundColor Gray
              }
          }
      } else {
          Write-Host "No network share information found in backup" -ForegroundColor Yellow
      } 