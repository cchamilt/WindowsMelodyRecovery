metadata:
    name: browsers
    displayName: Browser Settings
    description: Template for backing up web browser configurations, bookmarks, and extensions.
    version: "1.0"
    author: Windows Melody Recovery

prerequisites:
    - type: script
      name: "Browser System Available"
      inline_script: |
          try {
              Get-Command Get-ItemProperty -ErrorAction Stop | Out-Null
              Write-Output "Browser system available"
          } catch {
              Write-Output "Browser system not available"
          }
      expected_output: "Browser system available"
      on_missing: warn

registry:
    # Chrome registry settings
    - name: Chrome User Settings
      path: 'HKCU:\Software\Google\Chrome'
      type: key
      action: sync
      dynamic_state_path: "registry/chrome_user.json"

    - name: Chrome System Policies
      path: 'HKLM:\SOFTWARE\Google\Chrome'
      type: key
      action: sync
      dynamic_state_path: "registry/chrome_system.json"

    # Edge registry settings
    - name: Edge User Settings
      path: 'HKCU:\Software\Microsoft\Edge'
      type: key
      action: sync
      dynamic_state_path: "registry/edge_user.json"

    - name: Edge System Policies
      path: 'HKLM:\SOFTWARE\Microsoft\Edge'
      type: key
      action: sync
      dynamic_state_path: "registry/edge_system.json"

    # Firefox registry settings
    - name: Firefox User Settings
      path: 'HKCU:\Software\Mozilla\Firefox'
      type: key
      action: sync
      dynamic_state_path: "registry/firefox_user.json"

files:
    # Chrome profile data
    - name: Chrome User Data
      path: '%LOCALAPPDATA%\Google\Chrome\User Data'
      type: directory
      action: sync
      dynamic_state_path: "files/chrome_userdata"
      encrypt: false

    # Edge profile data
    - name: Edge User Data
      path: '%LOCALAPPDATA%\Microsoft\Edge\User Data'
      type: directory
      action: sync
      dynamic_state_path: "files/edge_userdata"
      encrypt: false

    # Firefox profiles
    - name: Firefox Profiles
      path: '%APPDATA%\Mozilla\Firefox'
      type: directory
      action: sync
      dynamic_state_path: "files/firefox_profiles"
      encrypt: false

    # Brave browser
    - name: Brave User Data
      path: '%LOCALAPPDATA%\BraveSoftware\Brave-Browser\User Data'
      type: directory
      action: sync
      dynamic_state_path: "files/brave_userdata"
      encrypt: false

    # Opera browser
    - name: Opera Stable
      path: '%APPDATA%\Opera Software\Opera Stable'
      type: directory
      action: sync
      dynamic_state_path: "files/opera_stable"
      encrypt: false

applications:
    # Simple browser detection
    - name: Installed Browsers
      type: custom
      dynamic_state_path: "installed_browsers.json"
      discovery_command: |
          $browsers = @()
          $paths = @(
            "${env:ProgramFiles}\Google\Chrome\Application\chrome.exe",
            "${env:ProgramFiles(x86)}\Google\Chrome\Application\chrome.exe",
            "${env:ProgramFiles}\Mozilla Firefox\firefox.exe",
            "${env:ProgramFiles(x86)}\Mozilla Firefox\firefox.exe",
            "${env:ProgramFiles}\Microsoft\Edge\Application\msedge.exe",
            "${env:ProgramFiles(x86)}\Microsoft\Edge\Application\msedge.exe"
          )
          foreach ($path in $paths) {
            if (Test-Path $path -ErrorAction SilentlyContinue) {
              $name = [System.IO.Path]::GetFileNameWithoutExtension($path)
              $browsers += @{
                DisplayName = $name
                DisplayVersion = "Unknown"
                InstallLocation = [System.IO.Path]::GetDirectoryName($path)
              }
            }
          }
          $browsers | ConvertTo-Json -Compress
      parse_script: |
          param($BrowserOutput)
          try {
            if ([string]::IsNullOrWhiteSpace($BrowserOutput)) {
              return @()
            }
            $browsers = $BrowserOutput | ConvertFrom-Json
            $applications = @()
            foreach ($browser in $browsers) {
              $applications += @{
                Name = "Browser-$($browser.DisplayName -replace '[^a-zA-Z0-9]', '')"
                Version = $browser.DisplayVersion
                DisplayName = $browser.DisplayName
                InstallLocation = $browser.InstallLocation
              }
            }
            return $applications
          } catch {
            Write-Warning "Failed to parse browser information: $_"
            return @()
          }
      install_script: |
          param($BrowsersJson)
          try {
            Write-Host "Browser applications cannot be automatically reinstalled" -ForegroundColor Yellow
            Write-Host "User will need to reinstall browsers manually" -ForegroundColor Yellow

            $browsers = $BrowsersJson | ConvertFrom-Json
            if ($browsers.Count -gt 0) {
              Write-Host "Browsers that were installed:" -ForegroundColor Cyan
              foreach ($browser in $browsers) {
                Write-Host "  - $($browser.DisplayName)" -ForegroundColor Gray
              }
            } else {
              Write-Host "No browsers found in backup" -ForegroundColor Yellow
            }
          } catch {
            Write-Warning "Failed to display browser information: $_"
          }

stages:
    post_update:
        - name: Browser Restoration Complete
          type: script
          inline_script: |
              Write-Host "Browser backup/restore completed." -ForegroundColor Green
              Write-Host "Browser profiles, bookmarks, and settings have been backed up." -ForegroundColor Yellow
              Write-Host "Note: Extensions may need to be re-enabled after browser profile restore." -ForegroundColor Yellow
          parameters: {}
