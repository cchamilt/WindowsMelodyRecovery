metadata:
  name: "Sound Settings"
  description: "Backup and restore Windows audio configuration including devices, sound schemes, spatial audio, and volume settings"
  author: "Windows Melody Recovery"
  version: "1.0.0"

prerequisites:
  - type: script
    name: "Sound System Available"
    inline_script: |
      try {
          Get-Command Get-WmiObject -ErrorAction Stop | Out-Null
          Write-Output "Sound system available"
      } catch {
          Write-Output "Sound system not available"
      }
    expected_output: "Sound system available"
    on_missing: warn

registry:
  # Windows Audio Core Settings
  - name: "Windows Audio Settings"
    path: "HKCU:\\Software\\Microsoft\\Multimedia\\Audio"
    type: key
    action: sync
    dynamic_state_path: "sound/registry/windows_audio.json"

  - name: "Audio Device Control Panel"
    path: "HKCU:\\Software\\Microsoft\\Multimedia\\Audio\\DeviceCpl"
    type: key
    action: sync
    dynamic_state_path: "sound/registry/audio_device_cpl.json"

  - name: "MMDevices Audio Configuration"
    path: "HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\MMDevices\\Audio"
    type: key
    action: sync
    dynamic_state_path: "sound/registry/mmdevices_audio.json"

  - name: "Audio Drivers Registry"
    path: "HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Drivers32"
    type: key
    action: sync
    dynamic_state_path: "sound/registry/audio_drivers.json"

  # Sound Schemes and Events
  - name: "Sound Event Schemes"
    path: "HKCU:\\AppEvents\\Schemes"
    type: key
    action: sync
    dynamic_state_path: "sound/registry/sound_schemes.json"

  - name: "Sound Event Labels"
    path: "HKCU:\\AppEvents\\EventLabels"
    type: key
    action: sync
    dynamic_state_path: "sound/registry/event_labels.json"

  - name: "Application Sound Events"
    path: "HKCU:\\AppEvents\\Schemes\\Apps"
    type: key
    action: sync
    dynamic_state_path: "sound/registry/app_sound_events.json"

  - name: "Sound Scheme Names"
    path: "HKCU:\\AppEvents\\Schemes\\Names"
    type: key
    action: sync
    dynamic_state_path: "sound/registry/scheme_names.json"

  # Spatial Audio and Enhancements
  - name: "System Audio Configuration"
    path: "HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Audio"
    type: key
    action: sync
    dynamic_state_path: "sound/registry/system_audio_config.json"

  - name: "User Audio Configuration"
    path: "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Audio"
    type: key
    action: sync
    dynamic_state_path: "sound/registry/user_audio_config.json"

  - name: "Spatial Sound Settings"
    path: "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Audio\\SpatialSound"
    type: key
    action: sync
    dynamic_state_path: "sound/registry/spatial_sound.json"

  # Volume and Application Settings
  - name: "Multimedia Audio Settings"
    path: "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Multimedia\\Audio"
    type: key
    action: sync
    dynamic_state_path: "sound/registry/multimedia_audio.json"

  - name: "Audio Enhancements"
    path: "HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Audio\\AudioEnhancements"
    type: key
    action: sync
    dynamic_state_path: "sound/registry/audio_enhancements.json"

  # Audio Services
  - name: "Audio Endpoint Builder Service"
    path: "HKLM:\\SYSTEM\\CurrentControlSet\\Services\\AudioEndpointBuilder"
    type: key
    action: sync
    dynamic_state_path: "sound/registry/audio_endpoint_builder.json"

  - name: "Audio Service Configuration"
    path: "HKLM:\\SYSTEM\\CurrentControlSet\\Services\\Audiosrv"
    type: key
    action: sync
    dynamic_state_path: "sound/registry/audio_service.json"

applications:
  # Audio Device Information
  - name: "Audio Devices"
    type: custom
    discovery_command: "Get-WmiObject -Class Win32_SoundDevice | Select-Object -Property *"
    parse_script: |
      param([object]$AudioDevices)
      try {
          $devices = $AudioDevices | Select-Object -Property *
          $result = $devices | ConvertTo-Json -Depth 10
          return $result
      } catch {
          Write-Warning "Failed to parse audio devices: $_"
          return "[]"
      }
    dynamic_state_path: "sound/applications/audio_devices.json"

  # Default Audio Endpoints
  - name: "Default Audio Endpoints"
    type: custom
    discovery_command: |
      try {
          $endpoints = @()
          # Get default playback device
          $playbackDevice = powershell -Command "Add-Type -AssemblyName System.Runtime.WindowsRuntime; [Windows.Media.Devices.MediaDevice]::GetDefaultAudioRenderId([Windows.Media.Devices.AudioDeviceRole]::Default)"
          if ($playbackDevice) {
              $endpoints += @{ Type = "Playback"; Role = "Default"; DeviceId = $playbackDevice }
          }
          # Get default recording device  
          $recordingDevice = powershell -Command "Add-Type -AssemblyName System.Runtime.WindowsRuntime; [Windows.Media.Devices.MediaDevice]::GetDefaultAudioCaptureId([Windows.Media.Devices.AudioDeviceRole]::Default)"
          if ($recordingDevice) {
              $endpoints += @{ Type = "Recording"; Role = "Default"; DeviceId = $recordingDevice }
          }
          $endpoints
      } catch {
          Write-Warning "Could not retrieve default audio endpoints: $_"
          @()
      }
    parse_script: |
      param([object]$EndpointData)
      try {
          $endpoints = $EndpointData | Select-Object -Property *
          $result = $endpoints | ConvertTo-Json -Depth 5
          return $result
      } catch {
          Write-Warning "Failed to parse audio endpoints: $_"
          return "[]"
      }
    dynamic_state_path: "sound/applications/default_endpoints.json"

  # Audio Volume Information
  - name: "Audio Volume Settings"
    type: custom
    discovery_command: |
      try {
          # Get system volume information using WMI
          $volumeInfo = Get-WmiObject -Query "SELECT * FROM Win32_SoundDevice" | ForEach-Object {
              @{
                  Name = $_.Name
                  Status = $_.Status
                  DeviceID = $_.DeviceID
              }
          }
          $volumeInfo
      } catch {
          Write-Warning "Could not retrieve volume information: $_"
          @()
      }
    parse_script: |
      param([object]$VolumeData)
      try {
          $volumes = $VolumeData | Select-Object -Property *
          $result = $volumes | ConvertTo-Json -Depth 5
          return $result
      } catch {
          Write-Warning "Failed to parse volume data: $_"
          return "[]"
      }
    dynamic_state_path: "sound/applications/volume_settings.json"

cleanup:
  - name: "Verify Audio Service Running"
    type: check
    command: "Get-Service -Name 'Audiosrv' | Where-Object { $_.Status -eq 'Running' }"
    expected_result: "Running"
    on_failure: warn 